
stm32_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c64  08002fdc  08002fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c40  08006c40  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08006c40  08006c40  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c40  08006c40  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c40  08006c40  00016c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c44  08006c44  00016c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000084  08006ccc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08006ccc  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003a85  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013ac  00000000  00000000  00023b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000540  00000000  00000000  00024f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003b8  00000000  00000000  00025468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c5e  00000000  00000000  00025820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006ed7  00000000  00000000  0003e47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e4a8  00000000  00000000  00045355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000017bc  00000000  00000000  000d3800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d4fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000084 	.word	0x20000084
 8000200:	00000000 	.word	0x00000000
 8000204:	08002fc4 	.word	0x08002fc4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000088 	.word	0x20000088
 8000220:	08002fc4 	.word	0x08002fc4

08000224 <ILI9341_Delay>:
 * @brief  用于 ILI9341 简单延时函数
 * @param  nCount ：延时计数值
 * @retval 无
 */
void ILI9341_Delay(__IO uint32_t nCount)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
    for (; nCount != 0; nCount--)
 800022c:	e002      	b.n	8000234 <ILI9341_Delay+0x10>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3b01      	subs	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <ILI9341_Delay+0xa>
        ;
}
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
	...

08000248 <ILI9341_Write_Cmd>:
 * @brief  向ILI9341写入命令
 * @param  usCmd :要写入的命令（表寄存器地址）
 * @retval 无
 */
void ILI9341_Write_Cmd(uint16_t usCmd)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	80fb      	strh	r3, [r7, #6]
    ILI9341_CS_CLR; // 开始片选
 8000252:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <ILI9341_Write_Cmd+0x40>)
 8000254:	2210      	movs	r2, #16
 8000256:	615a      	str	r2, [r3, #20]
    ILI9341_DC_CLR; // 写命令
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <ILI9341_Write_Cmd+0x40>)
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	615a      	str	r2, [r3, #20]
    ILI9341_RD_SET; // 禁止读
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <ILI9341_Write_Cmd+0x40>)
 8000260:	2220      	movs	r2, #32
 8000262:	611a      	str	r2, [r3, #16]
    DATAOUT(usCmd); // 输出命令
 8000264:	4a09      	ldr	r2, [pc, #36]	; (800028c <ILI9341_Write_Cmd+0x44>)
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	60d3      	str	r3, [r2, #12]
    ILI9341_WR_CLR; // 写入开始
 800026a:	4b07      	ldr	r3, [pc, #28]	; (8000288 <ILI9341_Write_Cmd+0x40>)
 800026c:	2240      	movs	r2, #64	; 0x40
 800026e:	615a      	str	r2, [r3, #20]
    ILI9341_WR_SET; // 写入结束
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <ILI9341_Write_Cmd+0x40>)
 8000272:	2240      	movs	r2, #64	; 0x40
 8000274:	611a      	str	r2, [r3, #16]
    ILI9341_CS_SET; // 结束片选
 8000276:	4b04      	ldr	r3, [pc, #16]	; (8000288 <ILI9341_Write_Cmd+0x40>)
 8000278:	2210      	movs	r2, #16
 800027a:	611a      	str	r2, [r3, #16]
}
 800027c:	bf00      	nop
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	40011000 	.word	0x40011000
 800028c:	40010c00 	.word	0x40010c00

08000290 <ILI9341_Write_Data>:
 * @brief  向ILI9341写入数据
 * @param  usData :要写入的数据
 * @retval 无
 */
void ILI9341_Write_Data(uint16_t usData)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
    ILI9341_CS_CLR;  // 开始片选
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <ILI9341_Write_Data+0x40>)
 800029c:	2210      	movs	r2, #16
 800029e:	615a      	str	r2, [r3, #20]
    ILI9341_DC_SET;  // 写数据
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <ILI9341_Write_Data+0x40>)
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	611a      	str	r2, [r3, #16]
    ILI9341_RD_SET;  // 禁止读
 80002a6:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <ILI9341_Write_Data+0x40>)
 80002a8:	2220      	movs	r2, #32
 80002aa:	611a      	str	r2, [r3, #16]
    DATAOUT(usData); // 输出数据
 80002ac:	4a09      	ldr	r2, [pc, #36]	; (80002d4 <ILI9341_Write_Data+0x44>)
 80002ae:	88fb      	ldrh	r3, [r7, #6]
 80002b0:	60d3      	str	r3, [r2, #12]
    ILI9341_WR_CLR;  // 写入开始
 80002b2:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <ILI9341_Write_Data+0x40>)
 80002b4:	2240      	movs	r2, #64	; 0x40
 80002b6:	615a      	str	r2, [r3, #20]
    ILI9341_WR_SET;  // 写入结束
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <ILI9341_Write_Data+0x40>)
 80002ba:	2240      	movs	r2, #64	; 0x40
 80002bc:	611a      	str	r2, [r3, #16]
    ILI9341_CS_SET;  // 结束片选
 80002be:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <ILI9341_Write_Data+0x40>)
 80002c0:	2210      	movs	r2, #16
 80002c2:	611a      	str	r2, [r3, #16]
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40011000 	.word	0x40011000
 80002d4:	40010c00 	.word	0x40010c00

080002d8 <ILI9341_Read_Data>:
 * @brief  从ILI9341读取数据
 * @param  无
 * @retval 读取到的数据
 */
uint16_t ILI9341_Read_Data(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
    uint16_t data;
    ILI9341_DATA_PORT->CRL = 0X88888888; // 上拉输入
 80002de:	4b19      	ldr	r3, [pc, #100]	; (8000344 <ILI9341_Read_Data+0x6c>)
 80002e0:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80002e4:	601a      	str	r2, [r3, #0]
    ILI9341_DATA_PORT->CRH = 0X88888888; // 上拉输入
 80002e6:	4b17      	ldr	r3, [pc, #92]	; (8000344 <ILI9341_Read_Data+0x6c>)
 80002e8:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80002ec:	605a      	str	r2, [r3, #4]
    ILI9341_DATA_PORT->ODR = 0X0000;     // 全部输出0
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <ILI9341_Read_Data+0x6c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]

    ILI9341_DC_SET;
 80002f4:	4b14      	ldr	r3, [pc, #80]	; (8000348 <ILI9341_Read_Data+0x70>)
 80002f6:	2280      	movs	r2, #128	; 0x80
 80002f8:	611a      	str	r2, [r3, #16]
    ILI9341_WR_SET;
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <ILI9341_Read_Data+0x70>)
 80002fc:	2240      	movs	r2, #64	; 0x40
 80002fe:	611a      	str	r2, [r3, #16]

    ILI9341_CS_CLR;
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <ILI9341_Read_Data+0x70>)
 8000302:	2210      	movs	r2, #16
 8000304:	615a      	str	r2, [r3, #20]
    // 读取数据
    ILI9341_RD_CLR;
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <ILI9341_Read_Data+0x70>)
 8000308:	2220      	movs	r2, #32
 800030a:	615a      	str	r2, [r3, #20]

    data = DATAIN;
 800030c:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <ILI9341_Read_Data+0x6c>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	80fb      	strh	r3, [r7, #6]
    ILI9341_RD_SET;
 8000312:	4b0d      	ldr	r3, [pc, #52]	; (8000348 <ILI9341_Read_Data+0x70>)
 8000314:	2220      	movs	r2, #32
 8000316:	611a      	str	r2, [r3, #16]
    ILI9341_CS_SET;
 8000318:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <ILI9341_Read_Data+0x70>)
 800031a:	2210      	movs	r2, #16
 800031c:	611a      	str	r2, [r3, #16]

    ILI9341_DATA_PORT->CRL = 0X33333333; // 上拉输出
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <ILI9341_Read_Data+0x6c>)
 8000320:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000324:	601a      	str	r2, [r3, #0]
    ILI9341_DATA_PORT->CRH = 0X33333333; // 上拉输出
 8000326:	4b07      	ldr	r3, [pc, #28]	; (8000344 <ILI9341_Read_Data+0x6c>)
 8000328:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800032c:	605a      	str	r2, [r3, #4]
    ILI9341_DATA_PORT->ODR = 0XFFFF;     // 全部输出高
 800032e:	4b05      	ldr	r3, [pc, #20]	; (8000344 <ILI9341_Read_Data+0x6c>)
 8000330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000334:	60da      	str	r2, [r3, #12]
    return data;
 8000336:	88fb      	ldrh	r3, [r7, #6]
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40010c00 	.word	0x40010c00
 8000348:	40011000 	.word	0x40011000

0800034c <ILI9341_GPIO_Config>:
 * @brief  初始化ILI9341的IO引脚
 * @param  无
 * @retval 无
 */
static void ILI9341_GPIO_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	; 0x28
 8000350:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000352:	4b3c      	ldr	r3, [pc, #240]	; (8000444 <ILI9341_GPIO_Config+0xf8>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	4a3b      	ldr	r2, [pc, #236]	; (8000444 <ILI9341_GPIO_Config+0xf8>)
 8000358:	f043 0310 	orr.w	r3, r3, #16
 800035c:	6193      	str	r3, [r2, #24]
 800035e:	4b39      	ldr	r3, [pc, #228]	; (8000444 <ILI9341_GPIO_Config+0xf8>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	f003 0310 	and.w	r3, r3, #16
 8000366:	613b      	str	r3, [r7, #16]
 8000368:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800036a:	4b36      	ldr	r3, [pc, #216]	; (8000444 <ILI9341_GPIO_Config+0xf8>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	4a35      	ldr	r2, [pc, #212]	; (8000444 <ILI9341_GPIO_Config+0xf8>)
 8000370:	f043 0320 	orr.w	r3, r3, #32
 8000374:	6193      	str	r3, [r2, #24]
 8000376:	4b33      	ldr	r3, [pc, #204]	; (8000444 <ILI9341_GPIO_Config+0xf8>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	f003 0320 	and.w	r3, r3, #32
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000382:	4b30      	ldr	r3, [pc, #192]	; (8000444 <ILI9341_GPIO_Config+0xf8>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a2f      	ldr	r2, [pc, #188]	; (8000444 <ILI9341_GPIO_Config+0xf8>)
 8000388:	f043 0308 	orr.w	r3, r3, #8
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b2d      	ldr	r3, [pc, #180]	; (8000444 <ILI9341_GPIO_Config+0xf8>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f003 0308 	and.w	r3, r3, #8
 8000396:	60bb      	str	r3, [r7, #8]
 8000398:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_AFIO_CLK_ENABLE();
 800039a:	4b2a      	ldr	r3, [pc, #168]	; (8000444 <ILI9341_GPIO_Config+0xf8>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a29      	ldr	r2, [pc, #164]	; (8000444 <ILI9341_GPIO_Config+0xf8>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	4b27      	ldr	r3, [pc, #156]	; (8000444 <ILI9341_GPIO_Config+0xf8>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

    __HAL_AFIO_REMAP_SWJ_NOJTAG(); // 禁止JTAG
 80003b2:	4b25      	ldr	r3, [pc, #148]	; (8000448 <ILI9341_GPIO_Config+0xfc>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	627b      	str	r3, [r7, #36]	; 0x24
 80003b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003be:	627b      	str	r3, [r7, #36]	; 0x24
 80003c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003c6:	627b      	str	r3, [r7, #36]	; 0x24
 80003c8:	4a1f      	ldr	r2, [pc, #124]	; (8000448 <ILI9341_GPIO_Config+0xfc>)
 80003ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003cc:	6053      	str	r3, [r2, #4]

    /* Common GPIO configuration */
    GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP; // 推挽输出
 80003ce:	2301      	movs	r3, #1
 80003d0:	61bb      	str	r3, [r7, #24]
    GPIO_Initure.Pull = GPIO_PULLUP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	61fb      	str	r3, [r7, #28]
    GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;
 80003d6:	2303      	movs	r3, #3
 80003d8:	623b      	str	r3, [r7, #32]

    GPIO_Initure.Pin = ILI9341_DATA_PIN;
 80003da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ILI9341_DATA_PORT, &GPIO_Initure);
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	4619      	mov	r1, r3
 80003e6:	4819      	ldr	r0, [pc, #100]	; (800044c <ILI9341_GPIO_Config+0x100>)
 80003e8:	f001 fbc8 	bl	8001b7c <HAL_GPIO_Init>
     * 读   			:LCD-RD
     * 写   			:LCD-WR
     * 片选   		:LCD-CS
     * 数据/命令 	:LCD-DC
     */
    GPIO_Initure.Pin = ILI9341_RD_PIN;
 80003ec:	2320      	movs	r3, #32
 80003ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ILI9341_RD_PORT, &GPIO_Initure);
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	4619      	mov	r1, r3
 80003f6:	4816      	ldr	r0, [pc, #88]	; (8000450 <ILI9341_GPIO_Config+0x104>)
 80003f8:	f001 fbc0 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_Initure.Pin = ILI9341_WR_PIN;
 80003fc:	2340      	movs	r3, #64	; 0x40
 80003fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ILI9341_WR_PORT, &GPIO_Initure);
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	4619      	mov	r1, r3
 8000406:	4812      	ldr	r0, [pc, #72]	; (8000450 <ILI9341_GPIO_Config+0x104>)
 8000408:	f001 fbb8 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_Initure.Pin = ILI9341_CS_PIN;
 800040c:	2310      	movs	r3, #16
 800040e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ILI9341_CS_PORT, &GPIO_Initure);
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	4619      	mov	r1, r3
 8000416:	480e      	ldr	r0, [pc, #56]	; (8000450 <ILI9341_GPIO_Config+0x104>)
 8000418:	f001 fbb0 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_Initure.Pin = ILI9341_DC_PIN;
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ILI9341_DC_PORT, &GPIO_Initure);
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	4619      	mov	r1, r3
 8000426:	480a      	ldr	r0, [pc, #40]	; (8000450 <ILI9341_GPIO_Config+0x104>)
 8000428:	f001 fba8 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_Initure.Pin = ILI9341_BK_PIN;
 800042c:	2304      	movs	r3, #4
 800042e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ILI9341_BK_PORT, &GPIO_Initure);
 8000430:	f107 0314 	add.w	r3, r7, #20
 8000434:	4619      	mov	r1, r3
 8000436:	4807      	ldr	r0, [pc, #28]	; (8000454 <ILI9341_GPIO_Config+0x108>)
 8000438:	f001 fba0 	bl	8001b7c <HAL_GPIO_Init>
}
 800043c:	bf00      	nop
 800043e:	3728      	adds	r7, #40	; 0x28
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40021000 	.word	0x40021000
 8000448:	40010000 	.word	0x40010000
 800044c:	40010c00 	.word	0x40010c00
 8000450:	40011000 	.word	0x40011000
 8000454:	40011400 	.word	0x40011400

08000458 <ILI9341_REG_Config>:
 * @brief  初始化ILI9341寄存器
 * @param  无
 * @retval 无
 */
static void ILI9341_REG_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
    lcdid = ILI9341_ReadID();
 800045c:	f000 faa0 	bl	80009a0 <ILI9341_ReadID>
 8000460:	4603      	mov	r3, r0
 8000462:	461a      	mov	r2, r3
 8000464:	4bae      	ldr	r3, [pc, #696]	; (8000720 <ILI9341_REG_Config+0x2c8>)
 8000466:	801a      	strh	r2, [r3, #0]

    if (lcdid == LCDID_ILI9341)
 8000468:	4bad      	ldr	r3, [pc, #692]	; (8000720 <ILI9341_REG_Config+0x2c8>)
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	f249 3241 	movw	r2, #37697	; 0x9341
 8000470:	4293      	cmp	r3, r2
 8000472:	f040 8159 	bne.w	8000728 <ILI9341_REG_Config+0x2d0>
    {
        /*  Power control B (CFh)  */
        DEBUG_DELAY();
 8000476:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800047a:	f7ff fed3 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xCF);
 800047e:	20cf      	movs	r0, #207	; 0xcf
 8000480:	f7ff fee2 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x00);
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff03 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x81);
 800048a:	2081      	movs	r0, #129	; 0x81
 800048c:	f7ff ff00 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x30);
 8000490:	2030      	movs	r0, #48	; 0x30
 8000492:	f7ff fefd 	bl	8000290 <ILI9341_Write_Data>

        /*  Power on sequence control (EDh) */
        DEBUG_DELAY();
 8000496:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800049a:	f7ff fec3 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xED);
 800049e:	20ed      	movs	r0, #237	; 0xed
 80004a0:	f7ff fed2 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x64);
 80004a4:	2064      	movs	r0, #100	; 0x64
 80004a6:	f7ff fef3 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x03);
 80004aa:	2003      	movs	r0, #3
 80004ac:	f7ff fef0 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x12);
 80004b0:	2012      	movs	r0, #18
 80004b2:	f7ff feed 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x81);
 80004b6:	2081      	movs	r0, #129	; 0x81
 80004b8:	f7ff feea 	bl	8000290 <ILI9341_Write_Data>

        /*  Driver timing control A (E8h) */
        DEBUG_DELAY();
 80004bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80004c0:	f7ff feb0 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xE8);
 80004c4:	20e8      	movs	r0, #232	; 0xe8
 80004c6:	f7ff febf 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x85);
 80004ca:	2085      	movs	r0, #133	; 0x85
 80004cc:	f7ff fee0 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x10);
 80004d0:	2010      	movs	r0, #16
 80004d2:	f7ff fedd 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x78);
 80004d6:	2078      	movs	r0, #120	; 0x78
 80004d8:	f7ff feda 	bl	8000290 <ILI9341_Write_Data>

        /*  Power control A (CBh) */
        DEBUG_DELAY();
 80004dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80004e0:	f7ff fea0 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xCB);
 80004e4:	20cb      	movs	r0, #203	; 0xcb
 80004e6:	f7ff feaf 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x39);
 80004ea:	2039      	movs	r0, #57	; 0x39
 80004ec:	f7ff fed0 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x2C);
 80004f0:	202c      	movs	r0, #44	; 0x2c
 80004f2:	f7ff fecd 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x00);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff feca 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x34);
 80004fc:	2034      	movs	r0, #52	; 0x34
 80004fe:	f7ff fec7 	bl	8000290 <ILI9341_Write_Data>
        // ILI9341_Write_Data ( 0x02 );
        ILI9341_Write_Data(0x06); // 原来是0x02改为0x06可防止液晶显示白屏时有条纹的情况
 8000502:	2006      	movs	r0, #6
 8000504:	f7ff fec4 	bl	8000290 <ILI9341_Write_Data>

        /* Pump ratio control (F7h) */
        DEBUG_DELAY();
 8000508:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800050c:	f7ff fe8a 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xF7);
 8000510:	20f7      	movs	r0, #247	; 0xf7
 8000512:	f7ff fe99 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x20);
 8000516:	2020      	movs	r0, #32
 8000518:	f7ff feba 	bl	8000290 <ILI9341_Write_Data>

        /* Driver timing control B */
        DEBUG_DELAY();
 800051c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000520:	f7ff fe80 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xEA);
 8000524:	20ea      	movs	r0, #234	; 0xea
 8000526:	f7ff fe8f 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x00);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff feb0 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x00);
 8000530:	2000      	movs	r0, #0
 8000532:	f7ff fead 	bl	8000290 <ILI9341_Write_Data>

        /* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
        DEBUG_DELAY();
 8000536:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800053a:	f7ff fe73 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xB1);
 800053e:	20b1      	movs	r0, #177	; 0xb1
 8000540:	f7ff fe82 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f7ff fea3 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x1B);
 800054a:	201b      	movs	r0, #27
 800054c:	f7ff fea0 	bl	8000290 <ILI9341_Write_Data>

        /*  Display Function Control (B6h) */
        DEBUG_DELAY();
 8000550:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000554:	f7ff fe66 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xB6);
 8000558:	20b6      	movs	r0, #182	; 0xb6
 800055a:	f7ff fe75 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x0A);
 800055e:	200a      	movs	r0, #10
 8000560:	f7ff fe96 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0xA2);
 8000564:	20a2      	movs	r0, #162	; 0xa2
 8000566:	f7ff fe93 	bl	8000290 <ILI9341_Write_Data>

        /* Power Control 1 (C0h) */
        DEBUG_DELAY();
 800056a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800056e:	f7ff fe59 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xC0);
 8000572:	20c0      	movs	r0, #192	; 0xc0
 8000574:	f7ff fe68 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x35);
 8000578:	2035      	movs	r0, #53	; 0x35
 800057a:	f7ff fe89 	bl	8000290 <ILI9341_Write_Data>

        /* Power Control 2 (C1h) */
        DEBUG_DELAY();
 800057e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000582:	f7ff fe4f 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f7ff fe5e 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x11);
 800058c:	2011      	movs	r0, #17
 800058e:	f7ff fe7f 	bl	8000290 <ILI9341_Write_Data>

        /* VCOM Control 1 (C5h) */
        ILI9341_Write_Cmd(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f7ff fe58 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x45);
 8000598:	2045      	movs	r0, #69	; 0x45
 800059a:	f7ff fe79 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x45);
 800059e:	2045      	movs	r0, #69	; 0x45
 80005a0:	f7ff fe76 	bl	8000290 <ILI9341_Write_Data>

        /*  VCOM Control 2 (C7h)  */
        ILI9341_Write_Cmd(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f7ff fe4f 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0xA2);
 80005aa:	20a2      	movs	r0, #162	; 0xa2
 80005ac:	f7ff fe70 	bl	8000290 <ILI9341_Write_Data>

        /* Enable 3G (F2h) */
        ILI9341_Write_Cmd(0xF2);
 80005b0:	20f2      	movs	r0, #242	; 0xf2
 80005b2:	f7ff fe49 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x00);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff fe6a 	bl	8000290 <ILI9341_Write_Data>

        /* Gamma Set (26h) */
        ILI9341_Write_Cmd(0x26);
 80005bc:	2026      	movs	r0, #38	; 0x26
 80005be:	f7ff fe43 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x01);
 80005c2:	2001      	movs	r0, #1
 80005c4:	f7ff fe64 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 80005c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005cc:	f7ff fe2a 	bl	8000224 <ILI9341_Delay>

        /* Positive Gamma Correction */
        ILI9341_Write_Cmd(0xE0); // Set Gamma
 80005d0:	20e0      	movs	r0, #224	; 0xe0
 80005d2:	f7ff fe39 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x0F);
 80005d6:	200f      	movs	r0, #15
 80005d8:	f7ff fe5a 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x26);
 80005dc:	2026      	movs	r0, #38	; 0x26
 80005de:	f7ff fe57 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x24);
 80005e2:	2024      	movs	r0, #36	; 0x24
 80005e4:	f7ff fe54 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x0B);
 80005e8:	200b      	movs	r0, #11
 80005ea:	f7ff fe51 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x0E);
 80005ee:	200e      	movs	r0, #14
 80005f0:	f7ff fe4e 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x09);
 80005f4:	2009      	movs	r0, #9
 80005f6:	f7ff fe4b 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x54);
 80005fa:	2054      	movs	r0, #84	; 0x54
 80005fc:	f7ff fe48 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0xA8);
 8000600:	20a8      	movs	r0, #168	; 0xa8
 8000602:	f7ff fe45 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x46);
 8000606:	2046      	movs	r0, #70	; 0x46
 8000608:	f7ff fe42 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x0C);
 800060c:	200c      	movs	r0, #12
 800060e:	f7ff fe3f 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x17);
 8000612:	2017      	movs	r0, #23
 8000614:	f7ff fe3c 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x09);
 8000618:	2009      	movs	r0, #9
 800061a:	f7ff fe39 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x0F);
 800061e:	200f      	movs	r0, #15
 8000620:	f7ff fe36 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x07);
 8000624:	2007      	movs	r0, #7
 8000626:	f7ff fe33 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x00);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff fe30 	bl	8000290 <ILI9341_Write_Data>

        /* Negative Gamma Correction (E1h) */
        ILI9341_Write_Cmd(0XE1); // Set Gamma
 8000630:	20e1      	movs	r0, #225	; 0xe1
 8000632:	f7ff fe09 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x00);
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff fe2a 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x19);
 800063c:	2019      	movs	r0, #25
 800063e:	f7ff fe27 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x1B);
 8000642:	201b      	movs	r0, #27
 8000644:	f7ff fe24 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x04);
 8000648:	2004      	movs	r0, #4
 800064a:	f7ff fe21 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x10);
 800064e:	2010      	movs	r0, #16
 8000650:	f7ff fe1e 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x07);
 8000654:	2007      	movs	r0, #7
 8000656:	f7ff fe1b 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x2A);
 800065a:	202a      	movs	r0, #42	; 0x2a
 800065c:	f7ff fe18 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x47);
 8000660:	2047      	movs	r0, #71	; 0x47
 8000662:	f7ff fe15 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x39);
 8000666:	2039      	movs	r0, #57	; 0x39
 8000668:	f7ff fe12 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x03);
 800066c:	2003      	movs	r0, #3
 800066e:	f7ff fe0f 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x06);
 8000672:	2006      	movs	r0, #6
 8000674:	f7ff fe0c 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x06);
 8000678:	2006      	movs	r0, #6
 800067a:	f7ff fe09 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x30);
 800067e:	2030      	movs	r0, #48	; 0x30
 8000680:	f7ff fe06 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x38);
 8000684:	2038      	movs	r0, #56	; 0x38
 8000686:	f7ff fe03 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x0F);
 800068a:	200f      	movs	r0, #15
 800068c:	f7ff fe00 	bl	8000290 <ILI9341_Write_Data>

        /* memory access control set */
        DEBUG_DELAY();
 8000690:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000694:	f7ff fdc6 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0x36);
 8000698:	2036      	movs	r0, #54	; 0x36
 800069a:	f7ff fdd5 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0xC8); /*竖屏  左上角到 (起点)到右下角 (终点)扫描方式*/
 800069e:	20c8      	movs	r0, #200	; 0xc8
 80006a0:	f7ff fdf6 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 80006a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006a8:	f7ff fdbc 	bl	8000224 <ILI9341_Delay>

        /* column address control set */
        ILI9341_Write_Cmd(CMD_SetCoordinateX);
 80006ac:	202a      	movs	r0, #42	; 0x2a
 80006ae:	f7ff fdcb 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x00);
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff fdec 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x00);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff fde9 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x00);
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff fde6 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0xEF);
 80006c4:	20ef      	movs	r0, #239	; 0xef
 80006c6:	f7ff fde3 	bl	8000290 <ILI9341_Write_Data>

        /* page address control set */
        DEBUG_DELAY();
 80006ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006ce:	f7ff fda9 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(CMD_SetCoordinateY);
 80006d2:	202b      	movs	r0, #43	; 0x2b
 80006d4:	f7ff fdb8 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x00);
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff fdd9 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x00);
 80006de:	2000      	movs	r0, #0
 80006e0:	f7ff fdd6 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x01);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff fdd3 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x3F);
 80006ea:	203f      	movs	r0, #63	; 0x3f
 80006ec:	f7ff fdd0 	bl	8000290 <ILI9341_Write_Data>

        /*  Pixel Format Set (3Ah)  */
        DEBUG_DELAY();
 80006f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006f4:	f7ff fd96 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0x3a);
 80006f8:	203a      	movs	r0, #58	; 0x3a
 80006fa:	f7ff fda5 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x55);
 80006fe:	2055      	movs	r0, #85	; 0x55
 8000700:	f7ff fdc6 	bl	8000290 <ILI9341_Write_Data>

        /* Sleep Out (11h)  */
        ILI9341_Write_Cmd(0x11);
 8000704:	2011      	movs	r0, #17
 8000706:	f7ff fd9f 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Delay(0xAFFf << 2);
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <ILI9341_REG_Config+0x2cc>)
 800070c:	f7ff fd8a 	bl	8000224 <ILI9341_Delay>
        DEBUG_DELAY();
 8000710:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000714:	f7ff fd86 	bl	8000224 <ILI9341_Delay>

        /* Display ON (29h) */
        ILI9341_Write_Cmd(0x29);
 8000718:	2029      	movs	r0, #41	; 0x29
 800071a:	f7ff fd95 	bl	8000248 <ILI9341_Write_Cmd>
        /* Display ON (29h) */
        ILI9341_Write_Cmd(0x29); // Display on

        ILI9341_Write_Cmd(0x2c);
    }
}
 800071e:	e138      	b.n	8000992 <ILI9341_REG_Config+0x53a>
 8000720:	200000a0 	.word	0x200000a0
 8000724:	0002bffc 	.word	0x0002bffc
    else if (lcdid == LCDID_ST7789V)
 8000728:	4b9b      	ldr	r3, [pc, #620]	; (8000998 <ILI9341_REG_Config+0x540>)
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	f248 5252 	movw	r2, #34130	; 0x8552
 8000730:	4293      	cmp	r3, r2
 8000732:	f040 812e 	bne.w	8000992 <ILI9341_REG_Config+0x53a>
        DEBUG_DELAY();
 8000736:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800073a:	f7ff fd73 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xCF);
 800073e:	20cf      	movs	r0, #207	; 0xcf
 8000740:	f7ff fd82 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x00);
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff fda3 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0xC1);
 800074a:	20c1      	movs	r0, #193	; 0xc1
 800074c:	f7ff fda0 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x30);
 8000750:	2030      	movs	r0, #48	; 0x30
 8000752:	f7ff fd9d 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 8000756:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800075a:	f7ff fd63 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xED);
 800075e:	20ed      	movs	r0, #237	; 0xed
 8000760:	f7ff fd72 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x64);
 8000764:	2064      	movs	r0, #100	; 0x64
 8000766:	f7ff fd93 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x03);
 800076a:	2003      	movs	r0, #3
 800076c:	f7ff fd90 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x12);
 8000770:	2012      	movs	r0, #18
 8000772:	f7ff fd8d 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x81);
 8000776:	2081      	movs	r0, #129	; 0x81
 8000778:	f7ff fd8a 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 800077c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000780:	f7ff fd50 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xE8);
 8000784:	20e8      	movs	r0, #232	; 0xe8
 8000786:	f7ff fd5f 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x85);
 800078a:	2085      	movs	r0, #133	; 0x85
 800078c:	f7ff fd80 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x10);
 8000790:	2010      	movs	r0, #16
 8000792:	f7ff fd7d 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x78);
 8000796:	2078      	movs	r0, #120	; 0x78
 8000798:	f7ff fd7a 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 800079c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007a0:	f7ff fd40 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xCB);
 80007a4:	20cb      	movs	r0, #203	; 0xcb
 80007a6:	f7ff fd4f 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x39);
 80007aa:	2039      	movs	r0, #57	; 0x39
 80007ac:	f7ff fd70 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x2C);
 80007b0:	202c      	movs	r0, #44	; 0x2c
 80007b2:	f7ff fd6d 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x00);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff fd6a 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x34);
 80007bc:	2034      	movs	r0, #52	; 0x34
 80007be:	f7ff fd67 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x02);
 80007c2:	2002      	movs	r0, #2
 80007c4:	f7ff fd64 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 80007c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007cc:	f7ff fd2a 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xF7);
 80007d0:	20f7      	movs	r0, #247	; 0xf7
 80007d2:	f7ff fd39 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x20);
 80007d6:	2020      	movs	r0, #32
 80007d8:	f7ff fd5a 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 80007dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007e0:	f7ff fd20 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xEA);
 80007e4:	20ea      	movs	r0, #234	; 0xea
 80007e6:	f7ff fd2f 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x00);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff fd50 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x00);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff fd4d 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 80007f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007fa:	f7ff fd13 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xC0);  // Power control
 80007fe:	20c0      	movs	r0, #192	; 0xc0
 8000800:	f7ff fd22 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x21); // VRH[5:0]
 8000804:	2021      	movs	r0, #33	; 0x21
 8000806:	f7ff fd43 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 800080a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800080e:	f7ff fd09 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xC1);  // Power control
 8000812:	20c1      	movs	r0, #193	; 0xc1
 8000814:	f7ff fd18 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x11); // SAP[2:0];BT[3:0]
 8000818:	2011      	movs	r0, #17
 800081a:	f7ff fd39 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Cmd(0xC5);
 800081e:	20c5      	movs	r0, #197	; 0xc5
 8000820:	f7ff fd12 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x2D);
 8000824:	202d      	movs	r0, #45	; 0x2d
 8000826:	f7ff fd33 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x33);
 800082a:	2033      	movs	r0, #51	; 0x33
 800082c:	f7ff fd30 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 8000830:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000834:	f7ff fcf6 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0x36);  // Memory Access Control
 8000838:	2036      	movs	r0, #54	; 0x36
 800083a:	f7ff fd05 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x00); /*竖屏  左上角到 (起点)到右下角 (终点)扫描方式*/
 800083e:	2000      	movs	r0, #0
 8000840:	f7ff fd26 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 8000844:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000848:	f7ff fcec 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0x3A);
 800084c:	203a      	movs	r0, #58	; 0x3a
 800084e:	f7ff fcfb 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x55);
 8000852:	2055      	movs	r0, #85	; 0x55
 8000854:	f7ff fd1c 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 8000858:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800085c:	f7ff fce2 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xB1);
 8000860:	20b1      	movs	r0, #177	; 0xb1
 8000862:	f7ff fcf1 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x00);
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff fd12 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x17);
 800086c:	2017      	movs	r0, #23
 800086e:	f7ff fd0f 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 8000872:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000876:	f7ff fcd5 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xB6);
 800087a:	20b6      	movs	r0, #182	; 0xb6
 800087c:	f7ff fce4 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x0A);
 8000880:	200a      	movs	r0, #10
 8000882:	f7ff fd05 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0xA2);
 8000886:	20a2      	movs	r0, #162	; 0xa2
 8000888:	f7ff fd02 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Cmd(0xF6);
 800088c:	20f6      	movs	r0, #246	; 0xf6
 800088e:	f7ff fcdb 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x01);
 8000892:	2001      	movs	r0, #1
 8000894:	f7ff fcfc 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x30);
 8000898:	2030      	movs	r0, #48	; 0x30
 800089a:	f7ff fcf9 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Cmd(0xF2);
 800089e:	20f2      	movs	r0, #242	; 0xf2
 80008a0:	f7ff fcd2 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x00);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff fcf3 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Cmd(0x26);
 80008aa:	2026      	movs	r0, #38	; 0x26
 80008ac:	f7ff fccc 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0x01);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff fced 	bl	8000290 <ILI9341_Write_Data>
        DEBUG_DELAY();
 80008b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80008ba:	f7ff fcb3 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0xe0); // Positive gamma
 80008be:	20e0      	movs	r0, #224	; 0xe0
 80008c0:	f7ff fcc2 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0xd0);
 80008c4:	20d0      	movs	r0, #208	; 0xd0
 80008c6:	f7ff fce3 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x00);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff fce0 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x02);
 80008d0:	2002      	movs	r0, #2
 80008d2:	f7ff fcdd 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x07);
 80008d6:	2007      	movs	r0, #7
 80008d8:	f7ff fcda 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x0b);
 80008dc:	200b      	movs	r0, #11
 80008de:	f7ff fcd7 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x1a);
 80008e2:	201a      	movs	r0, #26
 80008e4:	f7ff fcd4 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x31);
 80008e8:	2031      	movs	r0, #49	; 0x31
 80008ea:	f7ff fcd1 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x54);
 80008ee:	2054      	movs	r0, #84	; 0x54
 80008f0:	f7ff fcce 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x40);
 80008f4:	2040      	movs	r0, #64	; 0x40
 80008f6:	f7ff fccb 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x29);
 80008fa:	2029      	movs	r0, #41	; 0x29
 80008fc:	f7ff fcc8 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x12);
 8000900:	2012      	movs	r0, #18
 8000902:	f7ff fcc5 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x12);
 8000906:	2012      	movs	r0, #18
 8000908:	f7ff fcc2 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x12);
 800090c:	2012      	movs	r0, #18
 800090e:	f7ff fcbf 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x17);
 8000912:	2017      	movs	r0, #23
 8000914:	f7ff fcbc 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Cmd(0xe1); // Negative gamma
 8000918:	20e1      	movs	r0, #225	; 0xe1
 800091a:	f7ff fc95 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Data(0xd0);
 800091e:	20d0      	movs	r0, #208	; 0xd0
 8000920:	f7ff fcb6 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x00);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fcb3 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x02);
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fcb0 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x07);
 8000930:	2007      	movs	r0, #7
 8000932:	f7ff fcad 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x05);
 8000936:	2005      	movs	r0, #5
 8000938:	f7ff fcaa 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x25);
 800093c:	2025      	movs	r0, #37	; 0x25
 800093e:	f7ff fca7 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x2d);
 8000942:	202d      	movs	r0, #45	; 0x2d
 8000944:	f7ff fca4 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x44);
 8000948:	2044      	movs	r0, #68	; 0x44
 800094a:	f7ff fca1 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x45);
 800094e:	2045      	movs	r0, #69	; 0x45
 8000950:	f7ff fc9e 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x1c);
 8000954:	201c      	movs	r0, #28
 8000956:	f7ff fc9b 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x18);
 800095a:	2018      	movs	r0, #24
 800095c:	f7ff fc98 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x16);
 8000960:	2016      	movs	r0, #22
 8000962:	f7ff fc95 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x1c);
 8000966:	201c      	movs	r0, #28
 8000968:	f7ff fc92 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Data(0x1d);
 800096c:	201d      	movs	r0, #29
 800096e:	f7ff fc8f 	bl	8000290 <ILI9341_Write_Data>
        ILI9341_Write_Cmd(0x11); // Exit Sleep
 8000972:	2011      	movs	r0, #17
 8000974:	f7ff fc68 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Delay(0xAFFf << 2);
 8000978:	4808      	ldr	r0, [pc, #32]	; (800099c <ILI9341_REG_Config+0x544>)
 800097a:	f7ff fc53 	bl	8000224 <ILI9341_Delay>
        DEBUG_DELAY();
 800097e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000982:	f7ff fc4f 	bl	8000224 <ILI9341_Delay>
        ILI9341_Write_Cmd(0x29); // Display on
 8000986:	2029      	movs	r0, #41	; 0x29
 8000988:	f7ff fc5e 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Write_Cmd(0x2c);
 800098c:	202c      	movs	r0, #44	; 0x2c
 800098e:	f7ff fc5b 	bl	8000248 <ILI9341_Write_Cmd>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000a0 	.word	0x200000a0
 800099c:	0002bffc 	.word	0x0002bffc

080009a0 <ILI9341_ReadID>:
 * @param  无
 * @retval 正常时返回值为LCD驱动芯片ID: LCDID_ILI9341/LCDID_ST7789V
 *         否则返回: LCDID_UNKNOWN
 */
uint16_t ILI9341_ReadID(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
    uint16_t id = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	80fb      	strh	r3, [r7, #6]

    ILI9341_Write_Cmd(0x04);
 80009aa:	2004      	movs	r0, #4
 80009ac:	f7ff fc4c 	bl	8000248 <ILI9341_Write_Cmd>
    ILI9341_Read_Data();
 80009b0:	f7ff fc92 	bl	80002d8 <ILI9341_Read_Data>
    ILI9341_Read_Data();
 80009b4:	f7ff fc90 	bl	80002d8 <ILI9341_Read_Data>
    id = ILI9341_Read_Data();
 80009b8:	f7ff fc8e 	bl	80002d8 <ILI9341_Read_Data>
 80009bc:	4603      	mov	r3, r0
 80009be:	80fb      	strh	r3, [r7, #6]
    id <<= 8;
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	021b      	lsls	r3, r3, #8
 80009c4:	80fb      	strh	r3, [r7, #6]
    id |= ILI9341_Read_Data();
 80009c6:	f7ff fc87 	bl	80002d8 <ILI9341_Read_Data>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	80fb      	strh	r3, [r7, #6]

    if (id == LCDID_ST7789V)
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	f248 5252 	movw	r2, #34130	; 0x8552
 80009da:	4293      	cmp	r3, r2
 80009dc:	d101      	bne.n	80009e2 <ILI9341_ReadID+0x42>
    {
        return id;
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	e01c      	b.n	8000a1c <ILI9341_ReadID+0x7c>
    }
    else
    {
        ILI9341_Write_Cmd(0xD3);
 80009e2:	20d3      	movs	r0, #211	; 0xd3
 80009e4:	f7ff fc30 	bl	8000248 <ILI9341_Write_Cmd>
        ILI9341_Read_Data();
 80009e8:	f7ff fc76 	bl	80002d8 <ILI9341_Read_Data>
        ILI9341_Read_Data();
 80009ec:	f7ff fc74 	bl	80002d8 <ILI9341_Read_Data>
        id = ILI9341_Read_Data();
 80009f0:	f7ff fc72 	bl	80002d8 <ILI9341_Read_Data>
 80009f4:	4603      	mov	r3, r0
 80009f6:	80fb      	strh	r3, [r7, #6]
        id <<= 8;
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	80fb      	strh	r3, [r7, #6]
        id |= ILI9341_Read_Data();
 80009fe:	f7ff fc6b 	bl	80002d8 <ILI9341_Read_Data>
 8000a02:	4603      	mov	r3, r0
 8000a04:	461a      	mov	r2, r3
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	80fb      	strh	r3, [r7, #6]
        if (id == LCDID_ILI9341)
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	f249 3241 	movw	r2, #37697	; 0x9341
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d101      	bne.n	8000a1a <ILI9341_ReadID+0x7a>
        {
            return id;
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	e000      	b.n	8000a1c <ILI9341_ReadID+0x7c>
        }
    }

    return LCDID_UNKNOWN;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <ILI9341_Init>:
 * @brief  ILI9341初始化函数，如果要用到lcd，一定要调用这个函数
 * @param  无
 * @retval 无
 */
void ILI9341_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
    ILI9341_GPIO_Config();
 8000a28:	f7ff fc90 	bl	800034c <ILI9341_GPIO_Config>

    ILI9341_BackLed_Control(ENABLE); // 点亮LCD背光灯
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 f80b 	bl	8000a48 <ILI9341_BackLed_Control>

    ILI9341_REG_Config();
 8000a32:	f7ff fd11 	bl	8000458 <ILI9341_REG_Config>

    // 设置默认扫描方向，其中 6 模式为大部分液晶例程的默认显示方向
    ILI9341_GramScan(LCD_SCAN_MODE);
 8000a36:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <ILI9341_Init+0x20>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f81c 	bl	8000a78 <ILI9341_GramScan>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000004 	.word	0x20000004

08000a48 <ILI9341_BackLed_Control>:
 *     @arg ENABLE :使能背光LED
 *     @arg DISABLE :禁用背光LED
 * @retval 无
 */
void ILI9341_BackLed_Control(FunctionalState enumState)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
    if (enumState)
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d004      	beq.n	8000a62 <ILI9341_BackLed_Control+0x1a>
    {
        digitalL(ILI9341_BK_PORT, ILI9341_BK_PIN);
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <ILI9341_BackLed_Control+0x2c>)
 8000a5a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a5e:	611a      	str	r2, [r3, #16]
    }
    else
    {
        digitalH(ILI9341_BK_PORT, ILI9341_BK_PIN);
    }
}
 8000a60:	e002      	b.n	8000a68 <ILI9341_BackLed_Control+0x20>
        digitalH(ILI9341_BK_PORT, ILI9341_BK_PIN);
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <ILI9341_BackLed_Control+0x2c>)
 8000a64:	2204      	movs	r2, #4
 8000a66:	611a      	str	r2, [r3, #16]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40011400 	.word	0x40011400

08000a78 <ILI9341_GramScan>:
                                |-----------------|
                                屏幕正面（宽240，高320）

 *******************************************************/
void ILI9341_GramScan(uint8_t ucOption)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
    // 参数检查，只可输入0-7
    if (ucOption > 7)
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	d874      	bhi.n	8000b72 <ILI9341_GramScan+0xfa>
        return;

    // 根据模式更新LCD_SCAN_MODE的值，主要用于触摸屏选择计算参数
    LCD_SCAN_MODE = ucOption;
 8000a88:	4a3c      	ldr	r2, [pc, #240]	; (8000b7c <ILI9341_GramScan+0x104>)
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	7013      	strb	r3, [r2, #0]

    // 根据模式更新XY方向的像素宽度
    if (ucOption % 2 == 0)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d107      	bne.n	8000aaa <ILI9341_GramScan+0x32>
    {
        // 0 2 4 6模式下X方向像素宽度为240，Y方向为320
        LCD_X_LENGTH = ILI9341_LESS_PIXEL;
 8000a9a:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <ILI9341_GramScan+0x108>)
 8000a9c:	22f0      	movs	r2, #240	; 0xf0
 8000a9e:	801a      	strh	r2, [r3, #0]
        LCD_Y_LENGTH = ILI9341_MORE_PIXEL;
 8000aa0:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <ILI9341_GramScan+0x10c>)
 8000aa2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000aa6:	801a      	strh	r2, [r3, #0]
 8000aa8:	e006      	b.n	8000ab8 <ILI9341_GramScan+0x40>
    }
    else
    {
        // 1 3 5 7模式下X方向像素宽度为320，Y方向为240
        LCD_X_LENGTH = ILI9341_MORE_PIXEL;
 8000aaa:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <ILI9341_GramScan+0x108>)
 8000aac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ab0:	801a      	strh	r2, [r3, #0]
        LCD_Y_LENGTH = ILI9341_LESS_PIXEL;
 8000ab2:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <ILI9341_GramScan+0x10c>)
 8000ab4:	22f0      	movs	r2, #240	; 0xf0
 8000ab6:	801a      	strh	r2, [r3, #0]
    }

    // 0x36命令参数的高3位可用于设置GRAM扫描方向
    ILI9341_Write_Cmd(0x36);
 8000ab8:	2036      	movs	r0, #54	; 0x36
 8000aba:	f7ff fbc5 	bl	8000248 <ILI9341_Write_Cmd>
    if (lcdid == LCDID_ILI9341)
 8000abe:	4b32      	ldr	r3, [pc, #200]	; (8000b88 <ILI9341_GramScan+0x110>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	f249 3241 	movw	r2, #37697	; 0x9341
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d10a      	bne.n	8000ae0 <ILI9341_GramScan+0x68>
    {
        ILI9341_Write_Data(0x08 | (ucOption << 5)); // 根据ucOption的值设置LCD参数，共0-7种模式
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	015b      	lsls	r3, r3, #5
 8000ace:	b21b      	sxth	r3, r3
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fbd9 	bl	8000290 <ILI9341_Write_Data>
 8000ade:	e00c      	b.n	8000afa <ILI9341_GramScan+0x82>
    }
    else if (lcdid == LCDID_ST7789V)
 8000ae0:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <ILI9341_GramScan+0x110>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	f248 5252 	movw	r2, #34130	; 0x8552
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d106      	bne.n	8000afa <ILI9341_GramScan+0x82>
    {
        ILI9341_Write_Data(0x00 | (ucOption << 5)); // 根据ucOption的值设置LCD参数，共0-7种模式
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	015b      	lsls	r3, r3, #5
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fbcb 	bl	8000290 <ILI9341_Write_Data>
    }
    ILI9341_Write_Cmd(CMD_SetCoordinateX);
 8000afa:	202a      	movs	r0, #42	; 0x2a
 8000afc:	f7ff fba4 	bl	8000248 <ILI9341_Write_Cmd>
    ILI9341_Write_Data(0x00);                             /* x 起始坐标高8位 */
 8000b00:	2000      	movs	r0, #0
 8000b02:	f7ff fbc5 	bl	8000290 <ILI9341_Write_Data>
    ILI9341_Write_Data(0x00);                             /* x 起始坐标低8位 */
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff fbc2 	bl	8000290 <ILI9341_Write_Data>
    ILI9341_Write_Data(((LCD_X_LENGTH - 1) >> 8) & 0xFF); /* x 结束坐标高8位 */
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <ILI9341_GramScan+0x108>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	121b      	asrs	r3, r3, #8
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fbb8 	bl	8000290 <ILI9341_Write_Data>
    ILI9341_Write_Data((LCD_X_LENGTH - 1) & 0xFF);        /* x 结束坐标低8位 */
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <ILI9341_GramScan+0x108>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fbaf 	bl	8000290 <ILI9341_Write_Data>

    ILI9341_Write_Cmd(CMD_SetCoordinateY);
 8000b32:	202b      	movs	r0, #43	; 0x2b
 8000b34:	f7ff fb88 	bl	8000248 <ILI9341_Write_Cmd>
    ILI9341_Write_Data(0x00);                             /* y 起始坐标高8位 */
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fba9 	bl	8000290 <ILI9341_Write_Data>
    ILI9341_Write_Data(0x00);                             /* y 起始坐标低8位 */
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff fba6 	bl	8000290 <ILI9341_Write_Data>
    ILI9341_Write_Data(((LCD_Y_LENGTH - 1) >> 8) & 0xFF); /* y 结束坐标高8位 */
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <ILI9341_GramScan+0x10c>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	121b      	asrs	r3, r3, #8
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fb9c 	bl	8000290 <ILI9341_Write_Data>
    ILI9341_Write_Data((LCD_Y_LENGTH - 1) & 0xFF);        /* y 结束坐标低8位 */
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <ILI9341_GramScan+0x10c>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fb93 	bl	8000290 <ILI9341_Write_Data>

    /* write gram start */
    ILI9341_Write_Cmd(CMD_SetPixel);
 8000b6a:	202c      	movs	r0, #44	; 0x2c
 8000b6c:	f7ff fb6c 	bl	8000248 <ILI9341_Write_Cmd>
 8000b70:	e000      	b.n	8000b74 <ILI9341_GramScan+0xfc>
        return;
 8000b72:	bf00      	nop
}
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000004 	.word	0x20000004
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000002 	.word	0x20000002
 8000b88:	200000a0 	.word	0x200000a0

08000b8c <ILI9341_OpenWindow>:
 * @param  usWidth ：窗口的宽度
 * @param  usHeight ：窗口的高度
 * @retval 无
 */
void ILI9341_OpenWindow(uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4604      	mov	r4, r0
 8000b94:	4608      	mov	r0, r1
 8000b96:	4611      	mov	r1, r2
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	80fb      	strh	r3, [r7, #6]
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80bb      	strh	r3, [r7, #4]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	807b      	strh	r3, [r7, #2]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	803b      	strh	r3, [r7, #0]
    ILI9341_Write_Cmd(CMD_SetCoordinateX); /* 设置X坐标 */
 8000baa:	202a      	movs	r0, #42	; 0x2a
 8000bac:	f7ff fb4c 	bl	8000248 <ILI9341_Write_Cmd>
    ILI9341_Write_Data(usX >> 8);          /* 先高8位，然后低8位 */
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	0a1b      	lsrs	r3, r3, #8
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fb6a 	bl	8000290 <ILI9341_Write_Data>
    ILI9341_Write_Data(usX & 0xff);        /* 设置起始点和结束点*/
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fb64 	bl	8000290 <ILI9341_Write_Data>
    ILI9341_Write_Data((usX + usWidth - 1) >> 8);
 8000bc8:	88fa      	ldrh	r2, [r7, #6]
 8000bca:	887b      	ldrh	r3, [r7, #2]
 8000bcc:	4413      	add	r3, r2
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	121b      	asrs	r3, r3, #8
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fb5b 	bl	8000290 <ILI9341_Write_Data>
    ILI9341_Write_Data((usX + usWidth - 1) & 0xff);
 8000bda:	88fa      	ldrh	r2, [r7, #6]
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	4413      	add	r3, r2
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	3b01      	subs	r3, #1
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fb50 	bl	8000290 <ILI9341_Write_Data>

    ILI9341_Write_Cmd(CMD_SetCoordinateY); /* 设置Y坐标*/
 8000bf0:	202b      	movs	r0, #43	; 0x2b
 8000bf2:	f7ff fb29 	bl	8000248 <ILI9341_Write_Cmd>
    ILI9341_Write_Data(usY >> 8);
 8000bf6:	88bb      	ldrh	r3, [r7, #4]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fb47 	bl	8000290 <ILI9341_Write_Data>
    ILI9341_Write_Data(usY & 0xff);
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fb41 	bl	8000290 <ILI9341_Write_Data>
    ILI9341_Write_Data((usY + usHeight - 1) >> 8);
 8000c0e:	88ba      	ldrh	r2, [r7, #4]
 8000c10:	883b      	ldrh	r3, [r7, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	3b01      	subs	r3, #1
 8000c16:	121b      	asrs	r3, r3, #8
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fb38 	bl	8000290 <ILI9341_Write_Data>
    ILI9341_Write_Data((usY + usHeight - 1) & 0xff);
 8000c20:	88ba      	ldrh	r2, [r7, #4]
 8000c22:	883b      	ldrh	r3, [r7, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fb2d 	bl	8000290 <ILI9341_Write_Data>
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd90      	pop	{r4, r7, pc}

08000c3e <ILI9341_SetCursor>:
 * @param  usX ：在特定扫描方向下光标的X坐标
 * @param  usY ：在特定扫描方向下光标的Y坐标
 * @retval 无
 */
static void ILI9341_SetCursor(uint16_t usX, uint16_t usY)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	460a      	mov	r2, r1
 8000c48:	80fb      	strh	r3, [r7, #6]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	80bb      	strh	r3, [r7, #4]
    ILI9341_OpenWindow(usX, usY, 1, 1);
 8000c4e:	88b9      	ldrh	r1, [r7, #4]
 8000c50:	88f8      	ldrh	r0, [r7, #6]
 8000c52:	2301      	movs	r3, #1
 8000c54:	2201      	movs	r2, #1
 8000c56:	f7ff ff99 	bl	8000b8c <ILI9341_OpenWindow>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <ILI9341_FillColor>:
 * @param  ulAmout_Point ：要填充颜色的像素点的总数目
 * @param  usColor ：颜色
 * @retval 无
 */
static __inline void ILI9341_FillColor(uint32_t ulAmout_Point, uint16_t usColor)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	807b      	strh	r3, [r7, #2]
    uint32_t i = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]

    /* memory write */
    ILI9341_Write_Cmd(CMD_SetPixel);
 8000c72:	202c      	movs	r0, #44	; 0x2c
 8000c74:	f7ff fae8 	bl	8000248 <ILI9341_Write_Cmd>

    for (i = 0; i < ulAmout_Point; i++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	e006      	b.n	8000c8c <ILI9341_FillColor+0x2a>
        ILI9341_Write_Data(usColor);
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fb05 	bl	8000290 <ILI9341_Write_Data>
    for (i = 0; i < ulAmout_Point; i++)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d3f4      	bcc.n	8000c7e <ILI9341_FillColor+0x1c>
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <ILI9341_Clear>:
 * @param  usHeight ：窗口的高度
 * @note 可使用LCD_SetBackColor、LCD_SetTextColor、LCD_SetColors函数设置颜色
 * @retval 无
 */
void ILI9341_Clear(uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	4608      	mov	r0, r1
 8000caa:	4611      	mov	r1, r2
 8000cac:	461a      	mov	r2, r3
 8000cae:	4623      	mov	r3, r4
 8000cb0:	80fb      	strh	r3, [r7, #6]
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80bb      	strh	r3, [r7, #4]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	807b      	strh	r3, [r7, #2]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	803b      	strh	r3, [r7, #0]
    ILI9341_OpenWindow(usX, usY, usWidth, usHeight);
 8000cbe:	883b      	ldrh	r3, [r7, #0]
 8000cc0:	887a      	ldrh	r2, [r7, #2]
 8000cc2:	88b9      	ldrh	r1, [r7, #4]
 8000cc4:	88f8      	ldrh	r0, [r7, #6]
 8000cc6:	f7ff ff61 	bl	8000b8c <ILI9341_OpenWindow>

    ILI9341_FillColor(usWidth * usHeight, CurrentBackColor);
 8000cca:	887b      	ldrh	r3, [r7, #2]
 8000ccc:	883a      	ldrh	r2, [r7, #0]
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <ILI9341_Clear+0x48>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4610      	mov	r0, r2
 8000cdc:	f7ff ffc1 	bl	8000c62 <ILI9341_FillColor>
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	2000000c 	.word	0x2000000c

08000cec <ILI9341_SetPointPixel>:
 * @param  usY ：在特定扫描方向下该点的Y坐标
 * @note 可使用LCD_SetBackColor、LCD_SetTextColor、LCD_SetColors函数设置颜色
 * @retval 无
 */
void ILI9341_SetPointPixel(uint16_t usX, uint16_t usY)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	80fb      	strh	r3, [r7, #6]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	80bb      	strh	r3, [r7, #4]
    if ((usX < LCD_X_LENGTH) && (usY < LCD_Y_LENGTH))
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <ILI9341_SetPointPixel+0x44>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	88fa      	ldrh	r2, [r7, #6]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d210      	bcs.n	8000d28 <ILI9341_SetPointPixel+0x3c>
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <ILI9341_SetPointPixel+0x48>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	88ba      	ldrh	r2, [r7, #4]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d20b      	bcs.n	8000d28 <ILI9341_SetPointPixel+0x3c>
    {
        ILI9341_SetCursor(usX, usY);
 8000d10:	88ba      	ldrh	r2, [r7, #4]
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff91 	bl	8000c3e <ILI9341_SetCursor>

        ILI9341_FillColor(1, CurrentTextColor);
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <ILI9341_SetPointPixel+0x4c>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff ff9d 	bl	8000c62 <ILI9341_FillColor>
    }
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000002 	.word	0x20000002
 8000d38:	200000a2 	.word	0x200000a2

08000d3c <ILI9341_DrawLine>:
 * @param  usY2 ：在特定扫描方向下线段的另一个端点Y坐标
 * @note 可使用LCD_SetBackColor、LCD_SetTextColor、LCD_SetColors函数设置颜色
 * @retval 无
 */
void ILI9341_DrawLine(uint16_t usX1, uint16_t usY1, uint16_t usX2, uint16_t usY2)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b08d      	sub	sp, #52	; 0x34
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4604      	mov	r4, r0
 8000d44:	4608      	mov	r0, r1
 8000d46:	4611      	mov	r1, r2
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	80fb      	strh	r3, [r7, #6]
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80bb      	strh	r3, [r7, #4]
 8000d52:	460b      	mov	r3, r1
 8000d54:	807b      	strh	r3, [r7, #2]
 8000d56:	4613      	mov	r3, r2
 8000d58:	803b      	strh	r3, [r7, #0]
    uint16_t us;
    uint16_t usX_Current, usY_Current;

    int32_t lError_X = 0, lError_Y = 0, lDelta_X, lDelta_Y, lDistance;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
    int32_t lIncrease_X, lIncrease_Y;

    lDelta_X = usX2 - usX1; // 计算坐标增量
 8000d62:	887a      	ldrh	r2, [r7, #2]
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	61fb      	str	r3, [r7, #28]
    lDelta_Y = usY2 - usY1;
 8000d6a:	883a      	ldrh	r2, [r7, #0]
 8000d6c:	88bb      	ldrh	r3, [r7, #4]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	61bb      	str	r3, [r7, #24]

    usX_Current = usX1;
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	85bb      	strh	r3, [r7, #44]	; 0x2c
    usY_Current = usY1;
 8000d76:	88bb      	ldrh	r3, [r7, #4]
 8000d78:	857b      	strh	r3, [r7, #42]	; 0x2a

    if (lDelta_X > 0)
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	dd02      	ble.n	8000d86 <ILI9341_DrawLine+0x4a>
        lIncrease_X = 1; // 设置单步方向
 8000d80:	2301      	movs	r3, #1
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	e00b      	b.n	8000d9e <ILI9341_DrawLine+0x62>

    else if (lDelta_X == 0)
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <ILI9341_DrawLine+0x56>
        lIncrease_X = 0; // 垂直线
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	e005      	b.n	8000d9e <ILI9341_DrawLine+0x62>

    else
    {
        lIncrease_X = -1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	613b      	str	r3, [r7, #16]
        lDelta_X = -lDelta_X;
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	425b      	negs	r3, r3
 8000d9c:	61fb      	str	r3, [r7, #28]
    }

    if (lDelta_Y > 0)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	dd02      	ble.n	8000daa <ILI9341_DrawLine+0x6e>
        lIncrease_Y = 1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	e00b      	b.n	8000dc2 <ILI9341_DrawLine+0x86>

    else if (lDelta_Y == 0)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <ILI9341_DrawLine+0x7a>
        lIncrease_Y = 0; // 水平线
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	e005      	b.n	8000dc2 <ILI9341_DrawLine+0x86>

    else
    {
        lIncrease_Y = -1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	60fb      	str	r3, [r7, #12]
        lDelta_Y = -lDelta_Y;
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	425b      	negs	r3, r3
 8000dc0:	61bb      	str	r3, [r7, #24]
    }

    if (lDelta_X > lDelta_Y)
 8000dc2:	69fa      	ldr	r2, [r7, #28]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	dd02      	ble.n	8000dd0 <ILI9341_DrawLine+0x94>
        lDistance = lDelta_X; // 选取基本增量坐标轴
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	e001      	b.n	8000dd4 <ILI9341_DrawLine+0x98>

    else
        lDistance = lDelta_Y;
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	617b      	str	r3, [r7, #20]

    for (us = 0; us <= lDistance + 1; us++) // 画线输出
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000dd8:	e02a      	b.n	8000e30 <ILI9341_DrawLine+0xf4>
    {
        ILI9341_SetPointPixel(usX_Current, usY_Current); // 画点
 8000dda:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000ddc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff83 	bl	8000cec <ILI9341_SetPointPixel>

        lError_X += lDelta_X;
 8000de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	4413      	add	r3, r2
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
        lError_Y += lDelta_Y;
 8000dee:	6a3a      	ldr	r2, [r7, #32]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	4413      	add	r3, r2
 8000df4:	623b      	str	r3, [r7, #32]

        if (lError_X > lDistance)
 8000df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dd08      	ble.n	8000e10 <ILI9341_DrawLine+0xd4>
        {
            lError_X -= lDistance;
 8000dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
            usX_Current += lIncrease_X;
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e0c:	4413      	add	r3, r2
 8000e0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }

        if (lError_Y > lDistance)
 8000e10:	6a3a      	ldr	r2, [r7, #32]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dd08      	ble.n	8000e2a <ILI9341_DrawLine+0xee>
        {
            lError_Y -= lDistance;
 8000e18:	6a3a      	ldr	r2, [r7, #32]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	623b      	str	r3, [r7, #32]
            usY_Current += lIncrease_Y;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e26:	4413      	add	r3, r2
 8000e28:	857b      	strh	r3, [r7, #42]	; 0x2a
    for (us = 0; us <= lDistance + 1; us++) // 画线输出
 8000e2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000e30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	429a      	cmp	r2, r3
 8000e38:	ddcf      	ble.n	8000dda <ILI9341_DrawLine+0x9e>
        }
    }
}
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
 8000e3e:	3734      	adds	r7, #52	; 0x34
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd90      	pop	{r4, r7, pc}

08000e44 <ILI9341_DrawRectangle>:
 *     @arg 1 :实心矩形
 * @note 可使用LCD_SetBackColor、LCD_SetTextColor、LCD_SetColors函数设置颜色
 * @retval 无
 */
void ILI9341_DrawRectangle(uint16_t usX_Start, uint16_t usY_Start, uint16_t usWidth, uint16_t usHeight, uint8_t ucFilled)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	4611      	mov	r1, r2
 8000e50:	461a      	mov	r2, r3
 8000e52:	4623      	mov	r3, r4
 8000e54:	80fb      	strh	r3, [r7, #6]
 8000e56:	4603      	mov	r3, r0
 8000e58:	80bb      	strh	r3, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	807b      	strh	r3, [r7, #2]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	803b      	strh	r3, [r7, #0]
    if (ucFilled)
 8000e62:	7e3b      	ldrb	r3, [r7, #24]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d011      	beq.n	8000e8c <ILI9341_DrawRectangle+0x48>
    {
        ILI9341_OpenWindow(usX_Start, usY_Start, usWidth, usHeight);
 8000e68:	883b      	ldrh	r3, [r7, #0]
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	88b9      	ldrh	r1, [r7, #4]
 8000e6e:	88f8      	ldrh	r0, [r7, #6]
 8000e70:	f7ff fe8c 	bl	8000b8c <ILI9341_OpenWindow>
        ILI9341_FillColor(usWidth * usHeight, CurrentTextColor);
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	883a      	ldrh	r2, [r7, #0]
 8000e78:	fb02 f303 	mul.w	r3, r2, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <ILI9341_DrawRectangle+0xd4>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	4619      	mov	r1, r3
 8000e84:	4610      	mov	r0, r2
 8000e86:	f7ff feec 	bl	8000c62 <ILI9341_FillColor>
        ILI9341_DrawLine(usX_Start, usY_Start, usX_Start + usWidth - 1, usY_Start);
        ILI9341_DrawLine(usX_Start, usY_Start + usHeight - 1, usX_Start + usWidth - 1, usY_Start + usHeight - 1);
        ILI9341_DrawLine(usX_Start, usY_Start, usX_Start, usY_Start + usHeight - 1);
        ILI9341_DrawLine(usX_Start + usWidth - 1, usY_Start, usX_Start + usWidth - 1, usY_Start + usHeight - 1);
    }
}
 8000e8a:	e041      	b.n	8000f10 <ILI9341_DrawRectangle+0xcc>
        ILI9341_DrawLine(usX_Start, usY_Start, usX_Start + usWidth - 1, usY_Start);
 8000e8c:	88fa      	ldrh	r2, [r7, #6]
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	4413      	add	r3, r2
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	3b01      	subs	r3, #1
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	88b9      	ldrh	r1, [r7, #4]
 8000e9c:	88f8      	ldrh	r0, [r7, #6]
 8000e9e:	f7ff ff4d 	bl	8000d3c <ILI9341_DrawLine>
        ILI9341_DrawLine(usX_Start, usY_Start + usHeight - 1, usX_Start + usWidth - 1, usY_Start + usHeight - 1);
 8000ea2:	88ba      	ldrh	r2, [r7, #4]
 8000ea4:	883b      	ldrh	r3, [r7, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	b299      	uxth	r1, r3
 8000eae:	88fa      	ldrh	r2, [r7, #6]
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	b29c      	uxth	r4, r3
 8000eba:	88ba      	ldrh	r2, [r7, #4]
 8000ebc:	883b      	ldrh	r3, [r7, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	88f8      	ldrh	r0, [r7, #6]
 8000ec8:	4622      	mov	r2, r4
 8000eca:	f7ff ff37 	bl	8000d3c <ILI9341_DrawLine>
        ILI9341_DrawLine(usX_Start, usY_Start, usX_Start, usY_Start + usHeight - 1);
 8000ece:	88ba      	ldrh	r2, [r7, #4]
 8000ed0:	883b      	ldrh	r3, [r7, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	88b9      	ldrh	r1, [r7, #4]
 8000ede:	88f8      	ldrh	r0, [r7, #6]
 8000ee0:	f7ff ff2c 	bl	8000d3c <ILI9341_DrawLine>
        ILI9341_DrawLine(usX_Start + usWidth - 1, usY_Start, usX_Start + usWidth - 1, usY_Start + usHeight - 1);
 8000ee4:	88fa      	ldrh	r2, [r7, #6]
 8000ee6:	887b      	ldrh	r3, [r7, #2]
 8000ee8:	4413      	add	r3, r2
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	3b01      	subs	r3, #1
 8000eee:	b298      	uxth	r0, r3
 8000ef0:	88fa      	ldrh	r2, [r7, #6]
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	b29c      	uxth	r4, r3
 8000efc:	88ba      	ldrh	r2, [r7, #4]
 8000efe:	883b      	ldrh	r3, [r7, #0]
 8000f00:	4413      	add	r3, r2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	88b9      	ldrh	r1, [r7, #4]
 8000f0a:	4622      	mov	r2, r4
 8000f0c:	f7ff ff16 	bl	8000d3c <ILI9341_DrawLine>
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd90      	pop	{r4, r7, pc}
 8000f18:	200000a2 	.word	0x200000a2

08000f1c <ILI9341_DrawCircle>:
 *     @arg 1 :实心圆
 * @note 可使用LCD_SetBackColor、LCD_SetTextColor、LCD_SetColors函数设置颜色
 * @retval 无
 */
void ILI9341_DrawCircle(uint16_t usX_Center, uint16_t usY_Center, uint16_t usRadius, uint8_t ucFilled)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4604      	mov	r4, r0
 8000f24:	4608      	mov	r0, r1
 8000f26:	4611      	mov	r1, r2
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	80fb      	strh	r3, [r7, #6]
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80bb      	strh	r3, [r7, #4]
 8000f32:	460b      	mov	r3, r1
 8000f34:	807b      	strh	r3, [r7, #2]
 8000f36:	4613      	mov	r3, r2
 8000f38:	707b      	strb	r3, [r7, #1]
    int16_t sCurrentX, sCurrentY;
    int16_t sError;

    sCurrentX = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	81fb      	strh	r3, [r7, #14]
    sCurrentY = usRadius;
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	81bb      	strh	r3, [r7, #12]

    sError = 3 - (usRadius << 1); // 判断下个点位置的标志
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	f1c3 0303 	rsb	r3, r3, #3
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	817b      	strh	r3, [r7, #10]

    while (sCurrentX <= sCurrentY)
 8000f50:	e0ea      	b.n	8001128 <ILI9341_DrawCircle+0x20c>
    {
        int16_t sCountY;

        if (ucFilled)
 8000f52:	787b      	ldrb	r3, [r7, #1]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d067      	beq.n	8001028 <ILI9341_DrawCircle+0x10c>
            for (sCountY = sCurrentX; sCountY <= sCurrentY; sCountY++)
 8000f58:	89fb      	ldrh	r3, [r7, #14]
 8000f5a:	813b      	strh	r3, [r7, #8]
 8000f5c:	e05d      	b.n	800101a <ILI9341_DrawCircle+0xfe>
            {
                ILI9341_SetPointPixel(usX_Center + sCurrentX, usY_Center + sCountY); // 1，研究对象
 8000f5e:	89fa      	ldrh	r2, [r7, #14]
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	4413      	add	r3, r2
 8000f64:	b298      	uxth	r0, r3
 8000f66:	893a      	ldrh	r2, [r7, #8]
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f7ff febc 	bl	8000cec <ILI9341_SetPointPixel>
                ILI9341_SetPointPixel(usX_Center - sCurrentX, usY_Center + sCountY); // 2
 8000f74:	89fb      	ldrh	r3, [r7, #14]
 8000f76:	88fa      	ldrh	r2, [r7, #6]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	b298      	uxth	r0, r3
 8000f7c:	893a      	ldrh	r2, [r7, #8]
 8000f7e:	88bb      	ldrh	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	4619      	mov	r1, r3
 8000f86:	f7ff feb1 	bl	8000cec <ILI9341_SetPointPixel>
                ILI9341_SetPointPixel(usX_Center - sCountY, usY_Center + sCurrentX); // 3
 8000f8a:	893b      	ldrh	r3, [r7, #8]
 8000f8c:	88fa      	ldrh	r2, [r7, #6]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	b298      	uxth	r0, r3
 8000f92:	89fa      	ldrh	r2, [r7, #14]
 8000f94:	88bb      	ldrh	r3, [r7, #4]
 8000f96:	4413      	add	r3, r2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fea6 	bl	8000cec <ILI9341_SetPointPixel>
                ILI9341_SetPointPixel(usX_Center - sCountY, usY_Center - sCurrentX); // 4
 8000fa0:	893b      	ldrh	r3, [r7, #8]
 8000fa2:	88fa      	ldrh	r2, [r7, #6]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	b298      	uxth	r0, r3
 8000fa8:	89fb      	ldrh	r3, [r7, #14]
 8000faa:	88ba      	ldrh	r2, [r7, #4]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff fe9b 	bl	8000cec <ILI9341_SetPointPixel>
                ILI9341_SetPointPixel(usX_Center - sCurrentX, usY_Center - sCountY); // 5
 8000fb6:	89fb      	ldrh	r3, [r7, #14]
 8000fb8:	88fa      	ldrh	r2, [r7, #6]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	b298      	uxth	r0, r3
 8000fbe:	893b      	ldrh	r3, [r7, #8]
 8000fc0:	88ba      	ldrh	r2, [r7, #4]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f7ff fe90 	bl	8000cec <ILI9341_SetPointPixel>
                ILI9341_SetPointPixel(usX_Center + sCurrentX, usY_Center - sCountY); // 6
 8000fcc:	89fa      	ldrh	r2, [r7, #14]
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b298      	uxth	r0, r3
 8000fd4:	893b      	ldrh	r3, [r7, #8]
 8000fd6:	88ba      	ldrh	r2, [r7, #4]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fe85 	bl	8000cec <ILI9341_SetPointPixel>
                ILI9341_SetPointPixel(usX_Center + sCountY, usY_Center - sCurrentX); // 7
 8000fe2:	893a      	ldrh	r2, [r7, #8]
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b298      	uxth	r0, r3
 8000fea:	89fb      	ldrh	r3, [r7, #14]
 8000fec:	88ba      	ldrh	r2, [r7, #4]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fe7a 	bl	8000cec <ILI9341_SetPointPixel>
                ILI9341_SetPointPixel(usX_Center + sCountY, usY_Center + sCurrentX); // 0
 8000ff8:	893a      	ldrh	r2, [r7, #8]
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b298      	uxth	r0, r3
 8001000:	89fa      	ldrh	r2, [r7, #14]
 8001002:	88bb      	ldrh	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	b29b      	uxth	r3, r3
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fe6f 	bl	8000cec <ILI9341_SetPointPixel>
            for (sCountY = sCurrentX; sCountY <= sCurrentY; sCountY++)
 800100e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001012:	b29b      	uxth	r3, r3
 8001014:	3301      	adds	r3, #1
 8001016:	b29b      	uxth	r3, r3
 8001018:	813b      	strh	r3, [r7, #8]
 800101a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800101e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001022:	429a      	cmp	r2, r3
 8001024:	dd9b      	ble.n	8000f5e <ILI9341_DrawCircle+0x42>
 8001026:	e057      	b.n	80010d8 <ILI9341_DrawCircle+0x1bc>
            }

        else
        {
            ILI9341_SetPointPixel(usX_Center + sCurrentX, usY_Center + sCurrentY); // 1，研究对象
 8001028:	89fa      	ldrh	r2, [r7, #14]
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	4413      	add	r3, r2
 800102e:	b298      	uxth	r0, r3
 8001030:	89ba      	ldrh	r2, [r7, #12]
 8001032:	88bb      	ldrh	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	b29b      	uxth	r3, r3
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fe57 	bl	8000cec <ILI9341_SetPointPixel>
            ILI9341_SetPointPixel(usX_Center - sCurrentX, usY_Center + sCurrentY); // 2
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	88fa      	ldrh	r2, [r7, #6]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	b298      	uxth	r0, r3
 8001046:	89ba      	ldrh	r2, [r7, #12]
 8001048:	88bb      	ldrh	r3, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	f7ff fe4c 	bl	8000cec <ILI9341_SetPointPixel>
            ILI9341_SetPointPixel(usX_Center - sCurrentY, usY_Center + sCurrentX); // 3
 8001054:	89bb      	ldrh	r3, [r7, #12]
 8001056:	88fa      	ldrh	r2, [r7, #6]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	b298      	uxth	r0, r3
 800105c:	89fa      	ldrh	r2, [r7, #14]
 800105e:	88bb      	ldrh	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	b29b      	uxth	r3, r3
 8001064:	4619      	mov	r1, r3
 8001066:	f7ff fe41 	bl	8000cec <ILI9341_SetPointPixel>
            ILI9341_SetPointPixel(usX_Center - sCurrentY, usY_Center - sCurrentX); // 4
 800106a:	89bb      	ldrh	r3, [r7, #12]
 800106c:	88fa      	ldrh	r2, [r7, #6]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	b298      	uxth	r0, r3
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	88ba      	ldrh	r2, [r7, #4]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	b29b      	uxth	r3, r3
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fe36 	bl	8000cec <ILI9341_SetPointPixel>
            ILI9341_SetPointPixel(usX_Center - sCurrentX, usY_Center - sCurrentY); // 5
 8001080:	89fb      	ldrh	r3, [r7, #14]
 8001082:	88fa      	ldrh	r2, [r7, #6]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	b298      	uxth	r0, r3
 8001088:	89bb      	ldrh	r3, [r7, #12]
 800108a:	88ba      	ldrh	r2, [r7, #4]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	b29b      	uxth	r3, r3
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff fe2b 	bl	8000cec <ILI9341_SetPointPixel>
            ILI9341_SetPointPixel(usX_Center + sCurrentX, usY_Center - sCurrentY); // 6
 8001096:	89fa      	ldrh	r2, [r7, #14]
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	4413      	add	r3, r2
 800109c:	b298      	uxth	r0, r3
 800109e:	89bb      	ldrh	r3, [r7, #12]
 80010a0:	88ba      	ldrh	r2, [r7, #4]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fe20 	bl	8000cec <ILI9341_SetPointPixel>
            ILI9341_SetPointPixel(usX_Center + sCurrentY, usY_Center - sCurrentX); // 7
 80010ac:	89ba      	ldrh	r2, [r7, #12]
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	4413      	add	r3, r2
 80010b2:	b298      	uxth	r0, r3
 80010b4:	89fb      	ldrh	r3, [r7, #14]
 80010b6:	88ba      	ldrh	r2, [r7, #4]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fe15 	bl	8000cec <ILI9341_SetPointPixel>
            ILI9341_SetPointPixel(usX_Center + sCurrentY, usY_Center + sCurrentX); // 0
 80010c2:	89ba      	ldrh	r2, [r7, #12]
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	4413      	add	r3, r2
 80010c8:	b298      	uxth	r0, r3
 80010ca:	89fa      	ldrh	r2, [r7, #14]
 80010cc:	88bb      	ldrh	r3, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fe0a 	bl	8000cec <ILI9341_SetPointPixel>
        }

        sCurrentX++;
 80010d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	3301      	adds	r3, #1
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	81fb      	strh	r3, [r7, #14]

        if (sError < 0)
 80010e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da09      	bge.n	8001100 <ILI9341_DrawCircle+0x1e4>
            sError += 4 * sCurrentX + 6;
 80010ec:	89fb      	ldrh	r3, [r7, #14]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	897b      	ldrh	r3, [r7, #10]
 80010f4:	4413      	add	r3, r2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3306      	adds	r3, #6
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	817b      	strh	r3, [r7, #10]
 80010fe:	e013      	b.n	8001128 <ILI9341_DrawCircle+0x20c>

        else
        {
            sError += 10 + 4 * (sCurrentX - sCurrentY);
 8001100:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001104:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	b29b      	uxth	r3, r3
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	b29a      	uxth	r2, r3
 8001110:	897b      	ldrh	r3, [r7, #10]
 8001112:	4413      	add	r3, r2
 8001114:	b29b      	uxth	r3, r3
 8001116:	330a      	adds	r3, #10
 8001118:	b29b      	uxth	r3, r3
 800111a:	817b      	strh	r3, [r7, #10]
            sCurrentY--;
 800111c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001120:	b29b      	uxth	r3, r3
 8001122:	3b01      	subs	r3, #1
 8001124:	b29b      	uxth	r3, r3
 8001126:	81bb      	strh	r3, [r7, #12]
    while (sCurrentX <= sCurrentY)
 8001128:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800112c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	f77f af0e 	ble.w	8000f52 <ILI9341_DrawCircle+0x36>
        }
    }
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	bd90      	pop	{r4, r7, pc}

08001140 <ILI9341_DispChar_EN>:
 * @param  cChar ：要显示的英文字符
 * @note 可使用LCD_SetBackColor、LCD_SetTextColor、LCD_SetColors函数设置颜色
 * @retval 无
 */
void ILI9341_DispChar_EN(uint16_t usX, uint16_t usY, const char cChar)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
 800114a:	460b      	mov	r3, r1
 800114c:	80bb      	strh	r3, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	70fb      	strb	r3, [r7, #3]
    uint8_t byteCount, bitCount, fontLength;
    uint16_t ucRelativePositon;
    uint8_t *Pfont;

    // 对ascii码表偏移（字模表不包含ASCII表的前32个非图形符号）
    ucRelativePositon = cChar - ' ';
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	b29b      	uxth	r3, r3
 8001156:	3b20      	subs	r3, #32
 8001158:	82bb      	strh	r3, [r7, #20]

    // 每个字模的字节数
    fontLength = (LCD_Currentfonts->Width * LCD_Currentfonts->Height) / 8;
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <ILI9341_DispChar_EN+0xc0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	889b      	ldrh	r3, [r3, #4]
 8001160:	461a      	mov	r2, r3
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <ILI9341_DispChar_EN+0xc0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	88db      	ldrh	r3, [r3, #6]
 8001168:	fb02 f303 	mul.w	r3, r2, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	da00      	bge.n	8001172 <ILI9341_DispChar_EN+0x32>
 8001170:	3307      	adds	r3, #7
 8001172:	10db      	asrs	r3, r3, #3
 8001174:	74fb      	strb	r3, [r7, #19]

    // 字模首地址
    /*ascii码表偏移值乘以每个字模的字节数，求出字模的偏移位置*/
    Pfont = (uint8_t *)&LCD_Currentfonts->table[ucRelativePositon * fontLength];
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <ILI9341_DispChar_EN+0xc0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	8aba      	ldrh	r2, [r7, #20]
 800117e:	7cf9      	ldrb	r1, [r7, #19]
 8001180:	fb01 f202 	mul.w	r2, r1, r2
 8001184:	4413      	add	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]

    // 设置显示窗口
    ILI9341_OpenWindow(usX, usY, LCD_Currentfonts->Width, LCD_Currentfonts->Height);
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <ILI9341_DispChar_EN+0xc0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	889a      	ldrh	r2, [r3, #4]
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <ILI9341_DispChar_EN+0xc0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	88db      	ldrh	r3, [r3, #6]
 8001194:	88b9      	ldrh	r1, [r7, #4]
 8001196:	88f8      	ldrh	r0, [r7, #6]
 8001198:	f7ff fcf8 	bl	8000b8c <ILI9341_OpenWindow>

    ILI9341_Write_Cmd(CMD_SetPixel);
 800119c:	202c      	movs	r0, #44	; 0x2c
 800119e:	f7ff f853 	bl	8000248 <ILI9341_Write_Cmd>

    // 按字节读取字模数据
    // 由于前面直接设置了显示窗口，显示数据会自动换行
    for (byteCount = 0; byteCount < fontLength; byteCount++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	75fb      	strb	r3, [r7, #23]
 80011a6:	e022      	b.n	80011ee <ILI9341_DispChar_EN+0xae>
    {
        // 一位一位处理要显示的颜色
        for (bitCount = 0; bitCount < 8; bitCount++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	75bb      	strb	r3, [r7, #22]
 80011ac:	e019      	b.n	80011e2 <ILI9341_DispChar_EN+0xa2>
        {
            if (Pfont[byteCount] & (0x80 >> bitCount))
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4619      	mov	r1, r3
 80011b8:	7dbb      	ldrb	r3, [r7, #22]
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	fa42 f303 	asr.w	r3, r2, r3
 80011c0:	400b      	ands	r3, r1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <ILI9341_DispChar_EN+0x92>
                ILI9341_Write_Data(CurrentTextColor);
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <ILI9341_DispChar_EN+0xc4>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f860 	bl	8000290 <ILI9341_Write_Data>
 80011d0:	e004      	b.n	80011dc <ILI9341_DispChar_EN+0x9c>
            else
                ILI9341_Write_Data(CurrentBackColor);
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <ILI9341_DispChar_EN+0xc8>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f85a 	bl	8000290 <ILI9341_Write_Data>
        for (bitCount = 0; bitCount < 8; bitCount++)
 80011dc:	7dbb      	ldrb	r3, [r7, #22]
 80011de:	3301      	adds	r3, #1
 80011e0:	75bb      	strb	r3, [r7, #22]
 80011e2:	7dbb      	ldrb	r3, [r7, #22]
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	d9e2      	bls.n	80011ae <ILI9341_DispChar_EN+0x6e>
    for (byteCount = 0; byteCount < fontLength; byteCount++)
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	3301      	adds	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
 80011ee:	7dfa      	ldrb	r2, [r7, #23]
 80011f0:	7cfb      	ldrb	r3, [r7, #19]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3d8      	bcc.n	80011a8 <ILI9341_DispChar_EN+0x68>
        }
    }
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000008 	.word	0x20000008
 8001204:	200000a2 	.word	0x200000a2
 8001208:	2000000c 	.word	0x2000000c

0800120c <ILI9341_DispStringLine_EN>:
 * @param  pStr ：要显示的英文字符串的首地址
 * @note 可使用LCD_SetBackColor、LCD_SetTextColor、LCD_SetColors函数设置颜色
 * @retval 无
 */
void ILI9341_DispStringLine_EN(uint16_t line, char *pStr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	80fb      	strh	r3, [r7, #6]
    uint16_t usX = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	81fb      	strh	r3, [r7, #14]

    while (*pStr != '\0')
 800121c:	e02d      	b.n	800127a <ILI9341_DispStringLine_EN+0x6e>
    {
        if ((usX - ILI9341_DispWindow_X_Star + LCD_Currentfonts->Width) > LCD_X_LENGTH)
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	4a1a      	ldr	r2, [pc, #104]	; (800128c <ILI9341_DispStringLine_EN+0x80>)
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	8892      	ldrh	r2, [r2, #4]
 8001226:	4413      	add	r3, r2
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <ILI9341_DispStringLine_EN+0x84>)
 800122a:	8812      	ldrh	r2, [r2, #0]
 800122c:	4293      	cmp	r3, r2
 800122e:	dd07      	ble.n	8001240 <ILI9341_DispStringLine_EN+0x34>
        {
            usX = ILI9341_DispWindow_X_Star;
 8001230:	2300      	movs	r3, #0
 8001232:	81fb      	strh	r3, [r7, #14]
            line += LCD_Currentfonts->Height;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <ILI9341_DispStringLine_EN+0x80>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	88da      	ldrh	r2, [r3, #6]
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	4413      	add	r3, r2
 800123e:	80fb      	strh	r3, [r7, #6]
        }

        if ((line - ILI9341_DispWindow_Y_Star + LCD_Currentfonts->Height) > LCD_Y_LENGTH)
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <ILI9341_DispStringLine_EN+0x80>)
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	88d2      	ldrh	r2, [r2, #6]
 8001248:	4413      	add	r3, r2
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <ILI9341_DispStringLine_EN+0x88>)
 800124c:	8812      	ldrh	r2, [r2, #0]
 800124e:	4293      	cmp	r3, r2
 8001250:	dd03      	ble.n	800125a <ILI9341_DispStringLine_EN+0x4e>
        {
            usX = ILI9341_DispWindow_X_Star;
 8001252:	2300      	movs	r3, #0
 8001254:	81fb      	strh	r3, [r7, #14]
            line = ILI9341_DispWindow_Y_Star;
 8001256:	2300      	movs	r3, #0
 8001258:	80fb      	strh	r3, [r7, #6]
        }

        ILI9341_DispChar_EN(usX, line, *pStr);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	781a      	ldrb	r2, [r3, #0]
 800125e:	88f9      	ldrh	r1, [r7, #6]
 8001260:	89fb      	ldrh	r3, [r7, #14]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff6c 	bl	8001140 <ILI9341_DispChar_EN>

        pStr++;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	603b      	str	r3, [r7, #0]

        usX += LCD_Currentfonts->Width;
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <ILI9341_DispStringLine_EN+0x80>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	889a      	ldrh	r2, [r3, #4]
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	4413      	add	r3, r2
 8001278:	81fb      	strh	r3, [r7, #14]
    while (*pStr != '\0')
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1cd      	bne.n	800121e <ILI9341_DispStringLine_EN+0x12>
    }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000008 	.word	0x20000008
 8001290:	20000000 	.word	0x20000000
 8001294:	20000002 	.word	0x20000002

08001298 <LCD_SetFont>:
 * 	@arg：Font16x24;
 * 	@arg：Font8x16;
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    LCD_Currentfonts = fonts;
 80012a0:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <LCD_SetFont+0x18>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	20000008 	.word	0x20000008

080012b4 <LCD_GetFont>:
 * @brief  获取当前字体类型
 * @param  None.
 * @retval 返回当前字体类型
 */
sFONT *LCD_GetFont(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
    return LCD_Currentfonts;
 80012b8:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <LCD_GetFont+0x10>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	20000008 	.word	0x20000008

080012c8 <LCD_SetColors>:
 * @param  TextColor: 指定前景(字体)颜色
 * @param  BackColor: 指定背景颜色
 * @retval None
 */
void LCD_SetColors(uint16_t TextColor, uint16_t BackColor)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	460a      	mov	r2, r1
 80012d2:	80fb      	strh	r3, [r7, #6]
 80012d4:	4613      	mov	r3, r2
 80012d6:	80bb      	strh	r3, [r7, #4]
    CurrentTextColor = TextColor;
 80012d8:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <LCD_SetColors+0x28>)
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	8013      	strh	r3, [r2, #0]
    CurrentBackColor = BackColor;
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <LCD_SetColors+0x2c>)
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	8013      	strh	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	200000a2 	.word	0x200000a2
 80012f4:	2000000c 	.word	0x2000000c

080012f8 <LCD_SetTextColor>:
 * @brief  设置LCD的前景(字体)颜色,RGB565
 * @param  Color: 指定前景(字体)颜色
 * @retval None
 */
void LCD_SetTextColor(uint16_t Color)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
    CurrentTextColor = Color;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <LCD_SetTextColor+0x1c>)
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	8013      	strh	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	200000a2 	.word	0x200000a2

08001318 <LCD_ClearLine>:
 *   本参数可使用宏LINE(0)、LINE(1)等方式指定要删除的行，
 *   宏LINE(x)会根据当前选择的字体来计算Y坐标值，并删除当前字体高度的第x行。
 * @retval None
 */
void LCD_ClearLine(uint16_t Line)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
    ILI9341_Clear(0, Line, LCD_X_LENGTH, ((sFONT *)LCD_GetFont())->Height); /* 清屏，显示全黑 */
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <LCD_ClearLine+0x28>)
 8001324:	881c      	ldrh	r4, [r3, #0]
 8001326:	f7ff ffc5 	bl	80012b4 <LCD_GetFont>
 800132a:	4603      	mov	r3, r0
 800132c:	88db      	ldrh	r3, [r3, #6]
 800132e:	88f9      	ldrh	r1, [r7, #6]
 8001330:	4622      	mov	r2, r4
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fcb4 	bl	8000ca0 <ILI9341_Clear>
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bd90      	pop	{r4, r7, pc}
 8001340:	20000000 	.word	0x20000000

08001344 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_GPIO_Init+0x40>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <MX_GPIO_Init+0x40>)
 8001350:	f043 0320 	orr.w	r3, r3, #32
 8001354:	6193      	str	r3, [r2, #24]
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_GPIO_Init+0x40>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_GPIO_Init+0x40>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	4a07      	ldr	r2, [pc, #28]	; (8001384 <MX_GPIO_Init+0x40>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6193      	str	r3, [r2, #24]
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <MX_GPIO_Init+0x40>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]

}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40021000 	.word	0x40021000

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138c:	f000 fab0 	bl	80018f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001390:	f000 f81c 	bl	80013cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001394:	f7ff ffd6 	bl	8001344 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
    ILI9341_Init();
 8001398:	f7ff fb44 	bl	8000a24 <ILI9341_Init>

    if(lcdid == LCDID_ILI9341)
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <main+0x40>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	f249 3241 	movw	r2, #37697	; 0x9341
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d103      	bne.n	80013b0 <main+0x28>
    {
        ILI9341_GramScan ( 6 );
 80013a8:	2006      	movs	r0, #6
 80013aa:	f7ff fb65 	bl	8000a78 <ILI9341_GramScan>
 80013ae:	e008      	b.n	80013c2 <main+0x3a>
    }
    else if(lcdid == LCDID_ST7789V)
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <main+0x40>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	f248 5252 	movw	r2, #34130	; 0x8552
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d102      	bne.n	80013c2 <main+0x3a>
    {
        ILI9341_GramScan ( 0 );
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff fb5b 	bl	8000a78 <ILI9341_GramScan>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  lcd_test();
 80013c2:	f000 f849 	bl	8001458 <lcd_test>
 80013c6:	e7fc      	b.n	80013c2 <main+0x3a>
 80013c8:	200000a0 	.word	0x200000a0

080013cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b090      	sub	sp, #64	; 0x40
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	2228      	movs	r2, #40	; 0x28
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 f960 	bl	80026a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fc:	2301      	movs	r3, #1
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001400:	2302      	movs	r3, #2
 8001402:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001408:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800140a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fd45 	bl	8001ea4 <HAL_RCC_OscConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001420:	f000 f9a5 	bl	800176e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001424:	230f      	movs	r3, #15
 8001426:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001428:	2302      	movs	r3, #2
 800142a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001434:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2102      	movs	r1, #2
 800143e:	4618      	mov	r0, r3
 8001440:	f000 ffb2 	bl	80023a8 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800144a:	f000 f990 	bl	800176e <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3740      	adds	r7, #64	; 0x40
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <lcd_test>:

/* USER CODE BEGIN 4 */
/*用于测试各种液晶的函数*/
static void lcd_test(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b09c      	sub	sp, #112	; 0x70
 800145c:	af02      	add	r7, sp, #8
    /*演示显示变量*/
    static uint8_t testCNT = 0;
    char dispBuff[100];

    testCNT++;
 800145e:	4bab      	ldr	r3, [pc, #684]	; (800170c <lcd_test+0x2b4>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4ba9      	ldr	r3, [pc, #676]	; (800170c <lcd_test+0x2b4>)
 8001468:	701a      	strb	r2, [r3, #0]

    LCD_SetFont(&Font8x16);
 800146a:	48a9      	ldr	r0, [pc, #676]	; (8001710 <lcd_test+0x2b8>)
 800146c:	f7ff ff14 	bl	8001298 <LCD_SetFont>
    LCD_SetColors(RED, BLACK);
 8001470:	2100      	movs	r1, #0
 8001472:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001476:	f7ff ff27 	bl	80012c8 <LCD_SetColors>

    ILI9341_Clear(0, 0, LCD_X_LENGTH, LCD_Y_LENGTH); /* 清屏，显示全黑 */
 800147a:	4ba6      	ldr	r3, [pc, #664]	; (8001714 <lcd_test+0x2bc>)
 800147c:	881a      	ldrh	r2, [r3, #0]
 800147e:	4ba6      	ldr	r3, [pc, #664]	; (8001718 <lcd_test+0x2c0>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	2100      	movs	r1, #0
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff fc0b 	bl	8000ca0 <ILI9341_Clear>
                                                     /********显示字符串示例*******/
    ILI9341_DispStringLine_EN(LINE(0), "BH 3.2_2.8 inch LCD para:");
 800148a:	f7ff ff13 	bl	80012b4 <LCD_GetFont>
 800148e:	49a3      	ldr	r1, [pc, #652]	; (800171c <lcd_test+0x2c4>)
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff febb 	bl	800120c <ILI9341_DispStringLine_EN>
    ILI9341_DispStringLine_EN(LINE(1), "Image resolution:240x320 px");
 8001496:	f7ff ff0d 	bl	80012b4 <LCD_GetFont>
 800149a:	4603      	mov	r3, r0
 800149c:	88db      	ldrh	r3, [r3, #6]
 800149e:	49a0      	ldr	r1, [pc, #640]	; (8001720 <lcd_test+0x2c8>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff feb3 	bl	800120c <ILI9341_DispStringLine_EN>
    if (lcdid == LCDID_ILI9341)
 80014a6:	4b9f      	ldr	r3, [pc, #636]	; (8001724 <lcd_test+0x2cc>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	f249 3241 	movw	r2, #37697	; 0x9341
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10a      	bne.n	80014c8 <lcd_test+0x70>
    {
        ILI9341_DispStringLine_EN(LINE(2), "ILI9341 LCD driver");
 80014b2:	f7ff feff 	bl	80012b4 <LCD_GetFont>
 80014b6:	4603      	mov	r3, r0
 80014b8:	88db      	ldrh	r3, [r3, #6]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	b29b      	uxth	r3, r3
 80014be:	499a      	ldr	r1, [pc, #616]	; (8001728 <lcd_test+0x2d0>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fea3 	bl	800120c <ILI9341_DispStringLine_EN>
 80014c6:	e00f      	b.n	80014e8 <lcd_test+0x90>
    }
    else if (lcdid == LCDID_ST7789V)
 80014c8:	4b96      	ldr	r3, [pc, #600]	; (8001724 <lcd_test+0x2cc>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	f248 5252 	movw	r2, #34130	; 0x8552
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d109      	bne.n	80014e8 <lcd_test+0x90>
    {
        ILI9341_DispStringLine_EN(LINE(2), "ST7789V LCD driver");
 80014d4:	f7ff feee 	bl	80012b4 <LCD_GetFont>
 80014d8:	4603      	mov	r3, r0
 80014da:	88db      	ldrh	r3, [r3, #6]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4992      	ldr	r1, [pc, #584]	; (800172c <lcd_test+0x2d4>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fe92 	bl	800120c <ILI9341_DispStringLine_EN>
    }
    ILI9341_DispStringLine_EN(LINE(3), "XPT2046 Touch Pad driver");
 80014e8:	f7ff fee4 	bl	80012b4 <LCD_GetFont>
 80014ec:	4603      	mov	r3, r0
 80014ee:	88db      	ldrh	r3, [r3, #6]
 80014f0:	461a      	mov	r2, r3
 80014f2:	0052      	lsls	r2, r2, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	498d      	ldr	r1, [pc, #564]	; (8001730 <lcd_test+0x2d8>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fe86 	bl	800120c <ILI9341_DispStringLine_EN>

    /********显示变量示例*******/
    LCD_SetFont(&Font16x24);
 8001500:	488c      	ldr	r0, [pc, #560]	; (8001734 <lcd_test+0x2dc>)
 8001502:	f7ff fec9 	bl	8001298 <LCD_SetFont>
    LCD_SetTextColor(GREEN);
 8001506:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800150a:	f7ff fef5 	bl	80012f8 <LCD_SetTextColor>

    /*使用c标准库把变量转化成字符串*/
    sprintf(dispBuff, "Count : %d ", testCNT);
 800150e:	4b7f      	ldr	r3, [pc, #508]	; (800170c <lcd_test+0x2b4>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4988      	ldr	r1, [pc, #544]	; (8001738 <lcd_test+0x2e0>)
 8001518:	4618      	mov	r0, r3
 800151a:	f001 f8a1 	bl	8002660 <siprintf>
    LCD_ClearLine(LINE(4)); /* 清除单行文字 */
 800151e:	f7ff fec9 	bl	80012b4 <LCD_GetFont>
 8001522:	4603      	mov	r3, r0
 8001524:	88db      	ldrh	r3, [r3, #6]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	b29b      	uxth	r3, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fef4 	bl	8001318 <LCD_ClearLine>

    /*然后显示该字符串即可，其它变量也是这样处理*/
    ILI9341_DispStringLine_EN(LINE(4), dispBuff);
 8001530:	f7ff fec0 	bl	80012b4 <LCD_GetFont>
 8001534:	4603      	mov	r3, r0
 8001536:	88db      	ldrh	r3, [r3, #6]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	b29b      	uxth	r3, r3
 800153c:	1d3a      	adds	r2, r7, #4
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fe63 	bl	800120c <ILI9341_DispStringLine_EN>

    /*******显示图形示例******/
    LCD_SetFont(&Font24x32);
 8001546:	487d      	ldr	r0, [pc, #500]	; (800173c <lcd_test+0x2e4>)
 8001548:	f7ff fea6 	bl	8001298 <LCD_SetFont>
    /* 画直线 */

    LCD_ClearLine(LINE(4)); /* 清除单行文字 */
 800154c:	f7ff feb2 	bl	80012b4 <LCD_GetFont>
 8001550:	4603      	mov	r3, r0
 8001552:	88db      	ldrh	r3, [r3, #6]
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	b29b      	uxth	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fedd 	bl	8001318 <LCD_ClearLine>
    LCD_SetTextColor(BLUE);
 800155e:	201f      	movs	r0, #31
 8001560:	f7ff feca 	bl	80012f8 <LCD_SetTextColor>

    ILI9341_DispStringLine_EN(LINE(4), "Draw line:");
 8001564:	f7ff fea6 	bl	80012b4 <LCD_GetFont>
 8001568:	4603      	mov	r3, r0
 800156a:	88db      	ldrh	r3, [r3, #6]
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	b29b      	uxth	r3, r3
 8001570:	4973      	ldr	r1, [pc, #460]	; (8001740 <lcd_test+0x2e8>)
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fe4a 	bl	800120c <ILI9341_DispStringLine_EN>

    LCD_SetTextColor(RED);
 8001578:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800157c:	f7ff febc 	bl	80012f8 <LCD_SetTextColor>
    ILI9341_DrawLine(50, 170, 210, 230);
 8001580:	23e6      	movs	r3, #230	; 0xe6
 8001582:	22d2      	movs	r2, #210	; 0xd2
 8001584:	21aa      	movs	r1, #170	; 0xaa
 8001586:	2032      	movs	r0, #50	; 0x32
 8001588:	f7ff fbd8 	bl	8000d3c <ILI9341_DrawLine>
    ILI9341_DrawLine(50, 200, 210, 240);
 800158c:	23f0      	movs	r3, #240	; 0xf0
 800158e:	22d2      	movs	r2, #210	; 0xd2
 8001590:	21c8      	movs	r1, #200	; 0xc8
 8001592:	2032      	movs	r0, #50	; 0x32
 8001594:	f7ff fbd2 	bl	8000d3c <ILI9341_DrawLine>

    LCD_SetTextColor(GREEN);
 8001598:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800159c:	f7ff feac 	bl	80012f8 <LCD_SetTextColor>
    ILI9341_DrawLine(100, 170, 200, 230);
 80015a0:	23e6      	movs	r3, #230	; 0xe6
 80015a2:	22c8      	movs	r2, #200	; 0xc8
 80015a4:	21aa      	movs	r1, #170	; 0xaa
 80015a6:	2064      	movs	r0, #100	; 0x64
 80015a8:	f7ff fbc8 	bl	8000d3c <ILI9341_DrawLine>
    ILI9341_DrawLine(200, 200, 220, 240);
 80015ac:	23f0      	movs	r3, #240	; 0xf0
 80015ae:	22dc      	movs	r2, #220	; 0xdc
 80015b0:	21c8      	movs	r1, #200	; 0xc8
 80015b2:	20c8      	movs	r0, #200	; 0xc8
 80015b4:	f7ff fbc2 	bl	8000d3c <ILI9341_DrawLine>

    LCD_SetTextColor(BLUE);
 80015b8:	201f      	movs	r0, #31
 80015ba:	f7ff fe9d 	bl	80012f8 <LCD_SetTextColor>
    ILI9341_DrawLine(110, 170, 110, 230);
 80015be:	23e6      	movs	r3, #230	; 0xe6
 80015c0:	226e      	movs	r2, #110	; 0x6e
 80015c2:	21aa      	movs	r1, #170	; 0xaa
 80015c4:	206e      	movs	r0, #110	; 0x6e
 80015c6:	f7ff fbb9 	bl	8000d3c <ILI9341_DrawLine>
    ILI9341_DrawLine(130, 200, 220, 240);
 80015ca:	23f0      	movs	r3, #240	; 0xf0
 80015cc:	22dc      	movs	r2, #220	; 0xdc
 80015ce:	21c8      	movs	r1, #200	; 0xc8
 80015d0:	2082      	movs	r0, #130	; 0x82
 80015d2:	f7ff fbb3 	bl	8000d3c <ILI9341_DrawLine>

    Delay(0xFFFFFF);
 80015d6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80015da:	f000 f8b7 	bl	800174c <Delay>

    ILI9341_Clear(0, 16 * 8, LCD_X_LENGTH, LCD_Y_LENGTH - 16 * 8); /* 清屏，显示全黑 */
 80015de:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <lcd_test+0x2bc>)
 80015e0:	881a      	ldrh	r2, [r3, #0]
 80015e2:	4b4d      	ldr	r3, [pc, #308]	; (8001718 <lcd_test+0x2c0>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	3b80      	subs	r3, #128	; 0x80
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fb57 	bl	8000ca0 <ILI9341_Clear>

    /*画矩形*/

    LCD_ClearLine(LINE(4)); /* 清除单行文字 */
 80015f2:	f7ff fe5f 	bl	80012b4 <LCD_GetFont>
 80015f6:	4603      	mov	r3, r0
 80015f8:	88db      	ldrh	r3, [r3, #6]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fe8a 	bl	8001318 <LCD_ClearLine>
    LCD_SetTextColor(BLUE);
 8001604:	201f      	movs	r0, #31
 8001606:	f7ff fe77 	bl	80012f8 <LCD_SetTextColor>

    ILI9341_DispStringLine_EN(LINE(4), "Draw Rect:");
 800160a:	f7ff fe53 	bl	80012b4 <LCD_GetFont>
 800160e:	4603      	mov	r3, r0
 8001610:	88db      	ldrh	r3, [r3, #6]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	b29b      	uxth	r3, r3
 8001616:	494b      	ldr	r1, [pc, #300]	; (8001744 <lcd_test+0x2ec>)
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fdf7 	bl	800120c <ILI9341_DispStringLine_EN>

    LCD_SetTextColor(RED);
 800161e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001622:	f7ff fe69 	bl	80012f8 <LCD_SetTextColor>
    ILI9341_DrawRectangle(50, 200, 100, 30, 1);
 8001626:	2301      	movs	r3, #1
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	231e      	movs	r3, #30
 800162c:	2264      	movs	r2, #100	; 0x64
 800162e:	21c8      	movs	r1, #200	; 0xc8
 8001630:	2032      	movs	r0, #50	; 0x32
 8001632:	f7ff fc07 	bl	8000e44 <ILI9341_DrawRectangle>

    LCD_SetTextColor(GREEN);
 8001636:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800163a:	f7ff fe5d 	bl	80012f8 <LCD_SetTextColor>
    ILI9341_DrawRectangle(160, 200, 20, 40, 0);
 800163e:	2300      	movs	r3, #0
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2328      	movs	r3, #40	; 0x28
 8001644:	2214      	movs	r2, #20
 8001646:	21c8      	movs	r1, #200	; 0xc8
 8001648:	20a0      	movs	r0, #160	; 0xa0
 800164a:	f7ff fbfb 	bl	8000e44 <ILI9341_DrawRectangle>

    LCD_SetTextColor(BLUE);
 800164e:	201f      	movs	r0, #31
 8001650:	f7ff fe52 	bl	80012f8 <LCD_SetTextColor>
    ILI9341_DrawRectangle(170, 200, 50, 20, 1);
 8001654:	2301      	movs	r3, #1
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2314      	movs	r3, #20
 800165a:	2232      	movs	r2, #50	; 0x32
 800165c:	21c8      	movs	r1, #200	; 0xc8
 800165e:	20aa      	movs	r0, #170	; 0xaa
 8001660:	f7ff fbf0 	bl	8000e44 <ILI9341_DrawRectangle>

    Delay(0xFFFFFF);
 8001664:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001668:	f000 f870 	bl	800174c <Delay>

    ILI9341_Clear(0, 16 * 8, LCD_X_LENGTH, LCD_Y_LENGTH - 16 * 8); /* 清屏，显示全黑 */
 800166c:	4b29      	ldr	r3, [pc, #164]	; (8001714 <lcd_test+0x2bc>)
 800166e:	881a      	ldrh	r2, [r3, #0]
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <lcd_test+0x2c0>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	3b80      	subs	r3, #128	; 0x80
 8001676:	b29b      	uxth	r3, r3
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff fb10 	bl	8000ca0 <ILI9341_Clear>

    /* 画圆 */
    LCD_ClearLine(LINE(4)); /* 清除单行文字 */
 8001680:	f7ff fe18 	bl	80012b4 <LCD_GetFont>
 8001684:	4603      	mov	r3, r0
 8001686:	88db      	ldrh	r3, [r3, #6]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	b29b      	uxth	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fe43 	bl	8001318 <LCD_ClearLine>
    LCD_SetTextColor(BLUE);
 8001692:	201f      	movs	r0, #31
 8001694:	f7ff fe30 	bl	80012f8 <LCD_SetTextColor>

    ILI9341_DispStringLine_EN(LINE(4), "Draw Cir:");
 8001698:	f7ff fe0c 	bl	80012b4 <LCD_GetFont>
 800169c:	4603      	mov	r3, r0
 800169e:	88db      	ldrh	r3, [r3, #6]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4928      	ldr	r1, [pc, #160]	; (8001748 <lcd_test+0x2f0>)
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fdb0 	bl	800120c <ILI9341_DispStringLine_EN>

    LCD_SetTextColor(RED);
 80016ac:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80016b0:	f7ff fe22 	bl	80012f8 <LCD_SetTextColor>
    ILI9341_DrawCircle(100, 200, 20, 0);
 80016b4:	2300      	movs	r3, #0
 80016b6:	2214      	movs	r2, #20
 80016b8:	21c8      	movs	r1, #200	; 0xc8
 80016ba:	2064      	movs	r0, #100	; 0x64
 80016bc:	f7ff fc2e 	bl	8000f1c <ILI9341_DrawCircle>

    LCD_SetTextColor(GREEN);
 80016c0:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80016c4:	f7ff fe18 	bl	80012f8 <LCD_SetTextColor>
    ILI9341_DrawCircle(100, 200, 10, 1);
 80016c8:	2301      	movs	r3, #1
 80016ca:	220a      	movs	r2, #10
 80016cc:	21c8      	movs	r1, #200	; 0xc8
 80016ce:	2064      	movs	r0, #100	; 0x64
 80016d0:	f7ff fc24 	bl	8000f1c <ILI9341_DrawCircle>

    LCD_SetTextColor(BLUE);
 80016d4:	201f      	movs	r0, #31
 80016d6:	f7ff fe0f 	bl	80012f8 <LCD_SetTextColor>
    ILI9341_DrawCircle(140, 200, 20, 0);
 80016da:	2300      	movs	r3, #0
 80016dc:	2214      	movs	r2, #20
 80016de:	21c8      	movs	r1, #200	; 0xc8
 80016e0:	208c      	movs	r0, #140	; 0x8c
 80016e2:	f7ff fc1b 	bl	8000f1c <ILI9341_DrawCircle>

    Delay(0xFFFFFF);
 80016e6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80016ea:	f000 f82f 	bl	800174c <Delay>

    ILI9341_Clear(0, 16 * 8, LCD_X_LENGTH, LCD_Y_LENGTH - 16 * 8); /* 清屏，显示全黑 */
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <lcd_test+0x2bc>)
 80016f0:	881a      	ldrh	r2, [r3, #0]
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <lcd_test+0x2c0>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	3b80      	subs	r3, #128	; 0x80
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff facf 	bl	8000ca0 <ILI9341_Clear>
}
 8001702:	bf00      	nop
 8001704:	3768      	adds	r7, #104	; 0x68
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200000a4 	.word	0x200000a4
 8001710:	20000010 	.word	0x20000010
 8001714:	20000000 	.word	0x20000000
 8001718:	20000002 	.word	0x20000002
 800171c:	08002fdc 	.word	0x08002fdc
 8001720:	08002ff8 	.word	0x08002ff8
 8001724:	200000a0 	.word	0x200000a0
 8001728:	08003014 	.word	0x08003014
 800172c:	08003028 	.word	0x08003028
 8001730:	0800303c 	.word	0x0800303c
 8001734:	20000018 	.word	0x20000018
 8001738:	08003058 	.word	0x08003058
 800173c:	20000020 	.word	0x20000020
 8001740:	08003064 	.word	0x08003064
 8001744:	08003070 	.word	0x08003070
 8001748:	0800307c 	.word	0x0800307c

0800174c <Delay>:
 * @brief  简单延时函数
 * @param  nCount ：延时计数值
 * @retval 无
 */
static void Delay(__IO uint32_t nCount)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
    for (; nCount != 0; nCount--)
 8001754:	e002      	b.n	800175c <Delay+0x10>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3b01      	subs	r3, #1
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f9      	bne.n	8001756 <Delay+0xa>
        ;
}
 8001762:	bf00      	nop
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001772:	b672      	cpsid	i
}
 8001774:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001776:	e7fe      	b.n	8001776 <Error_Handler+0x8>

08001778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_MspInit+0x5c>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_MspInit+0x5c>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6193      	str	r3, [r2, #24]
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_MspInit+0x5c>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_MspInit+0x5c>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_MspInit+0x5c>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_MspInit+0x5c>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_MspInit+0x60>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_MspInit+0x60>)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010000 	.word	0x40010000

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e0:	e7fe      	b.n	80017e0 <NMI_Handler+0x4>

080017e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <MemManage_Handler+0x4>

080017ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001822:	f000 f8ab 	bl	800197c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f000 ff28 	bl	80026b0 <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	2000c000 	.word	0x2000c000
 800188c:	00000400 	.word	0x00000400
 8001890:	200000a8 	.word	0x200000a8
 8001894:	200001f8 	.word	0x200001f8

08001898 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a4:	f7ff fff8 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a8:	480b      	ldr	r0, [pc, #44]	; (80018d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018aa:	490c      	ldr	r1, [pc, #48]	; (80018dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018ac:	4a0c      	ldr	r2, [pc, #48]	; (80018e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018c0:	4c09      	ldr	r4, [pc, #36]	; (80018e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ce:	f000 fef5 	bl	80026bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018d2:	f7ff fd59 	bl	8001388 <main>
  bx lr
 80018d6:	4770      	bx	lr
  ldr r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018dc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80018e0:	08006c48 	.word	0x08006c48
  ldr r2, =_sbss
 80018e4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80018e8:	200001f8 	.word	0x200001f8

080018ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <ADC1_2_IRQHandler>
	...

080018f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_Init+0x28>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_Init+0x28>)
 80018fa:	f043 0310 	orr.w	r3, r3, #16
 80018fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f907 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001906:	200f      	movs	r0, #15
 8001908:	f000 f808 	bl	800191c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800190c:	f7ff ff34 	bl	8001778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40022000 	.word	0x40022000

0800191c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x54>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x58>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001932:	fbb3 f3f1 	udiv	r3, r3, r1
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f911 	bl	8001b62 <HAL_SYSTICK_Config>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e00e      	b.n	8001968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d80a      	bhi.n	8001966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f000 f8e7 	bl	8001b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800195c:	4a06      	ldr	r2, [pc, #24]	; (8001978 <HAL_InitTick+0x5c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e000      	b.n	8001968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000028 	.word	0x20000028
 8001974:	20000030 	.word	0x20000030
 8001978:	2000002c 	.word	0x2000002c

0800197c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_IncTick+0x1c>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_IncTick+0x20>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a03      	ldr	r2, [pc, #12]	; (800199c <HAL_IncTick+0x20>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	20000030 	.word	0x20000030
 800199c:	200000ac 	.word	0x200000ac

080019a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b02      	ldr	r3, [pc, #8]	; (80019b0 <HAL_GetTick+0x10>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	200000ac 	.word	0x200000ac

080019b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60d3      	str	r3, [r2, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <__NVIC_GetPriorityGrouping+0x18>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	f003 0307 	and.w	r3, r3, #7
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	; (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
         );
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae0:	d301      	bcc.n	8001ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00f      	b.n	8001b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <SysTick_Config+0x40>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aee:	210f      	movs	r1, #15
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f7ff ff90 	bl	8001a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <SysTick_Config+0x40>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <SysTick_Config+0x40>)
 8001b00:	2207      	movs	r2, #7
 8001b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010

08001b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff49 	bl	80019b4 <__NVIC_SetPriorityGrouping>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3c:	f7ff ff5e 	bl	80019fc <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff90 	bl	8001a6c <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5f 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffb0 	bl	8001ad0 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b08b      	sub	sp, #44	; 0x2c
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8e:	e179      	b.n	8001e84 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b90:	2201      	movs	r2, #1
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	f040 8168 	bne.w	8001e7e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4a96      	ldr	r2, [pc, #600]	; (8001e0c <HAL_GPIO_Init+0x290>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d05e      	beq.n	8001c76 <HAL_GPIO_Init+0xfa>
 8001bb8:	4a94      	ldr	r2, [pc, #592]	; (8001e0c <HAL_GPIO_Init+0x290>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d875      	bhi.n	8001caa <HAL_GPIO_Init+0x12e>
 8001bbe:	4a94      	ldr	r2, [pc, #592]	; (8001e10 <HAL_GPIO_Init+0x294>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d058      	beq.n	8001c76 <HAL_GPIO_Init+0xfa>
 8001bc4:	4a92      	ldr	r2, [pc, #584]	; (8001e10 <HAL_GPIO_Init+0x294>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d86f      	bhi.n	8001caa <HAL_GPIO_Init+0x12e>
 8001bca:	4a92      	ldr	r2, [pc, #584]	; (8001e14 <HAL_GPIO_Init+0x298>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d052      	beq.n	8001c76 <HAL_GPIO_Init+0xfa>
 8001bd0:	4a90      	ldr	r2, [pc, #576]	; (8001e14 <HAL_GPIO_Init+0x298>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d869      	bhi.n	8001caa <HAL_GPIO_Init+0x12e>
 8001bd6:	4a90      	ldr	r2, [pc, #576]	; (8001e18 <HAL_GPIO_Init+0x29c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d04c      	beq.n	8001c76 <HAL_GPIO_Init+0xfa>
 8001bdc:	4a8e      	ldr	r2, [pc, #568]	; (8001e18 <HAL_GPIO_Init+0x29c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d863      	bhi.n	8001caa <HAL_GPIO_Init+0x12e>
 8001be2:	4a8e      	ldr	r2, [pc, #568]	; (8001e1c <HAL_GPIO_Init+0x2a0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d046      	beq.n	8001c76 <HAL_GPIO_Init+0xfa>
 8001be8:	4a8c      	ldr	r2, [pc, #560]	; (8001e1c <HAL_GPIO_Init+0x2a0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d85d      	bhi.n	8001caa <HAL_GPIO_Init+0x12e>
 8001bee:	2b12      	cmp	r3, #18
 8001bf0:	d82a      	bhi.n	8001c48 <HAL_GPIO_Init+0xcc>
 8001bf2:	2b12      	cmp	r3, #18
 8001bf4:	d859      	bhi.n	8001caa <HAL_GPIO_Init+0x12e>
 8001bf6:	a201      	add	r2, pc, #4	; (adr r2, 8001bfc <HAL_GPIO_Init+0x80>)
 8001bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfc:	08001c77 	.word	0x08001c77
 8001c00:	08001c51 	.word	0x08001c51
 8001c04:	08001c63 	.word	0x08001c63
 8001c08:	08001ca5 	.word	0x08001ca5
 8001c0c:	08001cab 	.word	0x08001cab
 8001c10:	08001cab 	.word	0x08001cab
 8001c14:	08001cab 	.word	0x08001cab
 8001c18:	08001cab 	.word	0x08001cab
 8001c1c:	08001cab 	.word	0x08001cab
 8001c20:	08001cab 	.word	0x08001cab
 8001c24:	08001cab 	.word	0x08001cab
 8001c28:	08001cab 	.word	0x08001cab
 8001c2c:	08001cab 	.word	0x08001cab
 8001c30:	08001cab 	.word	0x08001cab
 8001c34:	08001cab 	.word	0x08001cab
 8001c38:	08001cab 	.word	0x08001cab
 8001c3c:	08001cab 	.word	0x08001cab
 8001c40:	08001c59 	.word	0x08001c59
 8001c44:	08001c6d 	.word	0x08001c6d
 8001c48:	4a75      	ldr	r2, [pc, #468]	; (8001e20 <HAL_GPIO_Init+0x2a4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c4e:	e02c      	b.n	8001caa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	623b      	str	r3, [r7, #32]
          break;
 8001c56:	e029      	b.n	8001cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	623b      	str	r3, [r7, #32]
          break;
 8001c60:	e024      	b.n	8001cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	3308      	adds	r3, #8
 8001c68:	623b      	str	r3, [r7, #32]
          break;
 8001c6a:	e01f      	b.n	8001cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	330c      	adds	r3, #12
 8001c72:	623b      	str	r3, [r7, #32]
          break;
 8001c74:	e01a      	b.n	8001cac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e013      	b.n	8001cac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d105      	bne.n	8001c98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	611a      	str	r2, [r3, #16]
          break;
 8001c96:	e009      	b.n	8001cac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	615a      	str	r2, [r3, #20]
          break;
 8001ca2:	e003      	b.n	8001cac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
          break;
 8001ca8:	e000      	b.n	8001cac <HAL_GPIO_Init+0x130>
          break;
 8001caa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2bff      	cmp	r3, #255	; 0xff
 8001cb0:	d801      	bhi.n	8001cb6 <HAL_GPIO_Init+0x13a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	e001      	b.n	8001cba <HAL_GPIO_Init+0x13e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2bff      	cmp	r3, #255	; 0xff
 8001cc0:	d802      	bhi.n	8001cc8 <HAL_GPIO_Init+0x14c>
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	e002      	b.n	8001cce <HAL_GPIO_Init+0x152>
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	3b08      	subs	r3, #8
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	210f      	movs	r1, #15
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	401a      	ands	r2, r3
 8001ce0:	6a39      	ldr	r1, [r7, #32]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 80c1 	beq.w	8001e7e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cfc:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <HAL_GPIO_Init+0x2a8>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a48      	ldr	r2, [pc, #288]	; (8001e24 <HAL_GPIO_Init+0x2a8>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b46      	ldr	r3, [pc, #280]	; (8001e24 <HAL_GPIO_Init+0x2a8>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d14:	4a44      	ldr	r2, [pc, #272]	; (8001e28 <HAL_GPIO_Init+0x2ac>)
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a3c      	ldr	r2, [pc, #240]	; (8001e2c <HAL_GPIO_Init+0x2b0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d01f      	beq.n	8001d80 <HAL_GPIO_Init+0x204>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a3b      	ldr	r2, [pc, #236]	; (8001e30 <HAL_GPIO_Init+0x2b4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d019      	beq.n	8001d7c <HAL_GPIO_Init+0x200>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a3a      	ldr	r2, [pc, #232]	; (8001e34 <HAL_GPIO_Init+0x2b8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d013      	beq.n	8001d78 <HAL_GPIO_Init+0x1fc>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a39      	ldr	r2, [pc, #228]	; (8001e38 <HAL_GPIO_Init+0x2bc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00d      	beq.n	8001d74 <HAL_GPIO_Init+0x1f8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a38      	ldr	r2, [pc, #224]	; (8001e3c <HAL_GPIO_Init+0x2c0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <HAL_GPIO_Init+0x1f4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a37      	ldr	r2, [pc, #220]	; (8001e40 <HAL_GPIO_Init+0x2c4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_GPIO_Init+0x1f0>
 8001d68:	2305      	movs	r3, #5
 8001d6a:	e00a      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d6c:	2306      	movs	r3, #6
 8001d6e:	e008      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d70:	2304      	movs	r3, #4
 8001d72:	e006      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d74:	2303      	movs	r3, #3
 8001d76:	e004      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d80:	2300      	movs	r3, #0
 8001d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d92:	4925      	ldr	r1, [pc, #148]	; (8001e28 <HAL_GPIO_Init+0x2ac>)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_GPIO_Init+0x2c8>)
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	4924      	ldr	r1, [pc, #144]	; (8001e44 <HAL_GPIO_Init+0x2c8>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <HAL_GPIO_Init+0x2c8>)
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	4920      	ldr	r1, [pc, #128]	; (8001e44 <HAL_GPIO_Init+0x2c8>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <HAL_GPIO_Init+0x2c8>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	491a      	ldr	r1, [pc, #104]	; (8001e44 <HAL_GPIO_Init+0x2c8>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60cb      	str	r3, [r1, #12]
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <HAL_GPIO_Init+0x2c8>)
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	4916      	ldr	r1, [pc, #88]	; (8001e44 <HAL_GPIO_Init+0x2c8>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d025      	beq.n	8001e48 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_GPIO_Init+0x2c8>)
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	4910      	ldr	r1, [pc, #64]	; (8001e44 <HAL_GPIO_Init+0x2c8>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
 8001e08:	e025      	b.n	8001e56 <HAL_GPIO_Init+0x2da>
 8001e0a:	bf00      	nop
 8001e0c:	10320000 	.word	0x10320000
 8001e10:	10310000 	.word	0x10310000
 8001e14:	10220000 	.word	0x10220000
 8001e18:	10210000 	.word	0x10210000
 8001e1c:	10120000 	.word	0x10120000
 8001e20:	10110000 	.word	0x10110000
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	40010800 	.word	0x40010800
 8001e30:	40010c00 	.word	0x40010c00
 8001e34:	40011000 	.word	0x40011000
 8001e38:	40011400 	.word	0x40011400
 8001e3c:	40011800 	.word	0x40011800
 8001e40:	40011c00 	.word	0x40011c00
 8001e44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_GPIO_Init+0x324>)
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	4913      	ldr	r1, [pc, #76]	; (8001ea0 <HAL_GPIO_Init+0x324>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_GPIO_Init+0x324>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	490e      	ldr	r1, [pc, #56]	; (8001ea0 <HAL_GPIO_Init+0x324>)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
 8001e6e:	e006      	b.n	8001e7e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_GPIO_Init+0x324>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	4909      	ldr	r1, [pc, #36]	; (8001ea0 <HAL_GPIO_Init+0x324>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	3301      	adds	r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f47f ae7e 	bne.w	8001b90 <HAL_GPIO_Init+0x14>
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	372c      	adds	r7, #44	; 0x2c
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	40010400 	.word	0x40010400

08001ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e272      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8087 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec4:	4b92      	ldr	r3, [pc, #584]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d00c      	beq.n	8001eea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ed0:	4b8f      	ldr	r3, [pc, #572]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d112      	bne.n	8001f02 <HAL_RCC_OscConfig+0x5e>
 8001edc:	4b8c      	ldr	r3, [pc, #560]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee8:	d10b      	bne.n	8001f02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eea:	4b89      	ldr	r3, [pc, #548]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d06c      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x12c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d168      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e24c      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x76>
 8001f0c:	4b80      	ldr	r3, [pc, #512]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a7f      	ldr	r2, [pc, #508]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	e02e      	b.n	8001f78 <HAL_RCC_OscConfig+0xd4>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x98>
 8001f22:	4b7b      	ldr	r3, [pc, #492]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a7a      	ldr	r2, [pc, #488]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b78      	ldr	r3, [pc, #480]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a77      	ldr	r2, [pc, #476]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e01d      	b.n	8001f78 <HAL_RCC_OscConfig+0xd4>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0xbc>
 8001f46:	4b72      	ldr	r3, [pc, #456]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a71      	ldr	r2, [pc, #452]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b6f      	ldr	r3, [pc, #444]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a6e      	ldr	r2, [pc, #440]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e00b      	b.n	8001f78 <HAL_RCC_OscConfig+0xd4>
 8001f60:	4b6b      	ldr	r3, [pc, #428]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a6a      	ldr	r2, [pc, #424]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	4b68      	ldr	r3, [pc, #416]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a67      	ldr	r2, [pc, #412]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d013      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff fd0e 	bl	80019a0 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff fd0a 	bl	80019a0 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e200      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	4b5d      	ldr	r3, [pc, #372]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0xe4>
 8001fa6:	e014      	b.n	8001fd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fcfa 	bl	80019a0 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7ff fcf6 	bl	80019a0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e1ec      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	4b53      	ldr	r3, [pc, #332]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x10c>
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d063      	beq.n	80020a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fde:	4b4c      	ldr	r3, [pc, #304]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00b      	beq.n	8002002 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fea:	4b49      	ldr	r3, [pc, #292]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d11c      	bne.n	8002030 <HAL_RCC_OscConfig+0x18c>
 8001ff6:	4b46      	ldr	r3, [pc, #280]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d116      	bne.n	8002030 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	4b43      	ldr	r3, [pc, #268]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <HAL_RCC_OscConfig+0x176>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d001      	beq.n	800201a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e1c0      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201a:	4b3d      	ldr	r3, [pc, #244]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4939      	ldr	r1, [pc, #228]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202e:	e03a      	b.n	80020a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002038:	4b36      	ldr	r3, [pc, #216]	; (8002114 <HAL_RCC_OscConfig+0x270>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7ff fcaf 	bl	80019a0 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002046:	f7ff fcab 	bl	80019a0 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e1a1      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002058:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002064:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4927      	ldr	r1, [pc, #156]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]
 8002078:	e015      	b.n	80020a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <HAL_RCC_OscConfig+0x270>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff fc8e 	bl	80019a0 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002088:	f7ff fc8a 	bl	80019a0 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e180      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d03a      	beq.n	8002128 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d019      	beq.n	80020ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <HAL_RCC_OscConfig+0x274>)
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c0:	f7ff fc6e 	bl	80019a0 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c8:	f7ff fc6a 	bl	80019a0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e160      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f000 fa9c 	bl	8002624 <RCC_Delay>
 80020ec:	e01c      	b.n	8002128 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_RCC_OscConfig+0x274>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7ff fc54 	bl	80019a0 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fa:	e00f      	b.n	800211c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fc:	f7ff fc50 	bl	80019a0 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d908      	bls.n	800211c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e146      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	42420000 	.word	0x42420000
 8002118:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211c:	4b92      	ldr	r3, [pc, #584]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1e9      	bne.n	80020fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80a6 	beq.w	8002282 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213a:	4b8b      	ldr	r3, [pc, #556]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10d      	bne.n	8002162 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	4b88      	ldr	r3, [pc, #544]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	4a87      	ldr	r2, [pc, #540]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002150:	61d3      	str	r3, [r2, #28]
 8002152:	4b85      	ldr	r3, [pc, #532]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215e:	2301      	movs	r3, #1
 8002160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002162:	4b82      	ldr	r3, [pc, #520]	; (800236c <HAL_RCC_OscConfig+0x4c8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d118      	bne.n	80021a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216e:	4b7f      	ldr	r3, [pc, #508]	; (800236c <HAL_RCC_OscConfig+0x4c8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a7e      	ldr	r2, [pc, #504]	; (800236c <HAL_RCC_OscConfig+0x4c8>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217a:	f7ff fc11 	bl	80019a0 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002182:	f7ff fc0d 	bl	80019a0 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b64      	cmp	r3, #100	; 0x64
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e103      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	4b75      	ldr	r3, [pc, #468]	; (800236c <HAL_RCC_OscConfig+0x4c8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x312>
 80021a8:	4b6f      	ldr	r3, [pc, #444]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4a6e      	ldr	r2, [pc, #440]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6213      	str	r3, [r2, #32]
 80021b4:	e02d      	b.n	8002212 <HAL_RCC_OscConfig+0x36e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x334>
 80021be:	4b6a      	ldr	r3, [pc, #424]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4a69      	ldr	r2, [pc, #420]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6213      	str	r3, [r2, #32]
 80021ca:	4b67      	ldr	r3, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a66      	ldr	r2, [pc, #408]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	e01c      	b.n	8002212 <HAL_RCC_OscConfig+0x36e>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d10c      	bne.n	80021fa <HAL_RCC_OscConfig+0x356>
 80021e0:	4b61      	ldr	r3, [pc, #388]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4a60      	ldr	r2, [pc, #384]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	6213      	str	r3, [r2, #32]
 80021ec:	4b5e      	ldr	r3, [pc, #376]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4a5d      	ldr	r2, [pc, #372]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	e00b      	b.n	8002212 <HAL_RCC_OscConfig+0x36e>
 80021fa:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4a5a      	ldr	r2, [pc, #360]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6213      	str	r3, [r2, #32]
 8002206:	4b58      	ldr	r3, [pc, #352]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a57      	ldr	r2, [pc, #348]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d015      	beq.n	8002246 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7ff fbc1 	bl	80019a0 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7ff fbbd 	bl	80019a0 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0b1      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	4b4b      	ldr	r3, [pc, #300]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ee      	beq.n	8002222 <HAL_RCC_OscConfig+0x37e>
 8002244:	e014      	b.n	8002270 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7ff fbab 	bl	80019a0 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7ff fba7 	bl	80019a0 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e09b      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	4b40      	ldr	r3, [pc, #256]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ee      	bne.n	800224e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002276:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002280:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8087 	beq.w	800239a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800228c:	4b36      	ldr	r3, [pc, #216]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b08      	cmp	r3, #8
 8002296:	d061      	beq.n	800235c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d146      	bne.n	800232e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a0:	4b33      	ldr	r3, [pc, #204]	; (8002370 <HAL_RCC_OscConfig+0x4cc>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7ff fb7b 	bl	80019a0 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ae:	f7ff fb77 	bl	80019a0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e06d      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d4:	d108      	bne.n	80022e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	4921      	ldr	r1, [pc, #132]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e8:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a19      	ldr	r1, [r3, #32]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	430b      	orrs	r3, r1
 80022fa:	491b      	ldr	r1, [pc, #108]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_RCC_OscConfig+0x4cc>)
 8002302:	2201      	movs	r2, #1
 8002304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7ff fb4b 	bl	80019a0 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230e:	f7ff fb47 	bl	80019a0 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e03d      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x46a>
 800232c:	e035      	b.n	800239a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <HAL_RCC_OscConfig+0x4cc>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff fb34 	bl	80019a0 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233c:	f7ff fb30 	bl	80019a0 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e026      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCC_OscConfig+0x4c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x498>
 800235a:	e01e      	b.n	800239a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d107      	bne.n	8002374 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e019      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
 8002368:	40021000 	.word	0x40021000
 800236c:	40007000 	.word	0x40007000
 8002370:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_OscConfig+0x500>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	429a      	cmp	r2, r3
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0d0      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b6a      	ldr	r3, [pc, #424]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d910      	bls.n	80023ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b67      	ldr	r3, [pc, #412]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 0207 	bic.w	r2, r3, #7
 80023d2:	4965      	ldr	r1, [pc, #404]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b63      	ldr	r3, [pc, #396]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b8      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002404:	4b59      	ldr	r3, [pc, #356]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800240e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b50      	ldr	r3, [pc, #320]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	494d      	ldr	r1, [pc, #308]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d040      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d115      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07f      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b41      	ldr	r3, [pc, #260]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e073      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e06b      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b39      	ldr	r3, [pc, #228]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4936      	ldr	r1, [pc, #216]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002498:	f7ff fa82 	bl	80019a0 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7ff fa7e 	bl	80019a0 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e053      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d210      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 0207 	bic.w	r2, r3, #7
 80024de:	4922      	ldr	r1, [pc, #136]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b20      	ldr	r3, [pc, #128]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e032      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4916      	ldr	r1, [pc, #88]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490e      	ldr	r1, [pc, #56]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f821 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	490a      	ldr	r1, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x1c8>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1cc>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_ClockConfig+0x1d0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f9e0 	bl	800191c <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40022000 	.word	0x40022000
 800256c:	40021000 	.word	0x40021000
 8002570:	08006be8 	.word	0x08006be8
 8002574:	20000028 	.word	0x20000028
 8002578:	2000002c 	.word	0x2000002c

0800257c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002596:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <HAL_RCC_GetSysClockFreq+0x94>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d002      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x30>
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x36>
 80025aa:	e027      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ae:	613b      	str	r3, [r7, #16]
      break;
 80025b0:	e027      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	0c9b      	lsrs	r3, r3, #18
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	4a17      	ldr	r2, [pc, #92]	; (8002618 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_RCC_GetSysClockFreq+0x94>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	0c5b      	lsrs	r3, r3, #17
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	4a11      	ldr	r2, [pc, #68]	; (800261c <HAL_RCC_GetSysClockFreq+0xa0>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <HAL_RCC_GetSysClockFreq+0x98>)
 80025de:	fb03 f202 	mul.w	r2, r3, r2
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	e004      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025f0:	fb02 f303 	mul.w	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	613b      	str	r3, [r7, #16]
      break;
 80025fa:	e002      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetSysClockFreq+0x98>)
 80025fe:	613b      	str	r3, [r7, #16]
      break;
 8002600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002602:	693b      	ldr	r3, [r7, #16]
}
 8002604:	4618      	mov	r0, r3
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	007a1200 	.word	0x007a1200
 8002618:	08006bf8 	.word	0x08006bf8
 800261c:	08006c08 	.word	0x08006c08
 8002620:	003d0900 	.word	0x003d0900

08002624 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <RCC_Delay+0x34>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <RCC_Delay+0x38>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0a5b      	lsrs	r3, r3, #9
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002640:	bf00      	nop
  }
  while (Delay --);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1e5a      	subs	r2, r3, #1
 8002646:	60fa      	str	r2, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f9      	bne.n	8002640 <RCC_Delay+0x1c>
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	20000028 	.word	0x20000028
 800265c:	10624dd3 	.word	0x10624dd3

08002660 <siprintf>:
 8002660:	b40e      	push	{r1, r2, r3}
 8002662:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002666:	b500      	push	{lr}
 8002668:	b09c      	sub	sp, #112	; 0x70
 800266a:	ab1d      	add	r3, sp, #116	; 0x74
 800266c:	9002      	str	r0, [sp, #8]
 800266e:	9006      	str	r0, [sp, #24]
 8002670:	9107      	str	r1, [sp, #28]
 8002672:	9104      	str	r1, [sp, #16]
 8002674:	4808      	ldr	r0, [pc, #32]	; (8002698 <siprintf+0x38>)
 8002676:	4909      	ldr	r1, [pc, #36]	; (800269c <siprintf+0x3c>)
 8002678:	f853 2b04 	ldr.w	r2, [r3], #4
 800267c:	9105      	str	r1, [sp, #20]
 800267e:	6800      	ldr	r0, [r0, #0]
 8002680:	a902      	add	r1, sp, #8
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	f000 f98e 	bl	80029a4 <_svfiprintf_r>
 8002688:	2200      	movs	r2, #0
 800268a:	9b02      	ldr	r3, [sp, #8]
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	b01c      	add	sp, #112	; 0x70
 8002690:	f85d eb04 	ldr.w	lr, [sp], #4
 8002694:	b003      	add	sp, #12
 8002696:	4770      	bx	lr
 8002698:	20000080 	.word	0x20000080
 800269c:	ffff0208 	.word	0xffff0208

080026a0 <memset>:
 80026a0:	4603      	mov	r3, r0
 80026a2:	4402      	add	r2, r0
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d100      	bne.n	80026aa <memset+0xa>
 80026a8:	4770      	bx	lr
 80026aa:	f803 1b01 	strb.w	r1, [r3], #1
 80026ae:	e7f9      	b.n	80026a4 <memset+0x4>

080026b0 <__errno>:
 80026b0:	4b01      	ldr	r3, [pc, #4]	; (80026b8 <__errno+0x8>)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000080 	.word	0x20000080

080026bc <__libc_init_array>:
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	2600      	movs	r6, #0
 80026c0:	4d0c      	ldr	r5, [pc, #48]	; (80026f4 <__libc_init_array+0x38>)
 80026c2:	4c0d      	ldr	r4, [pc, #52]	; (80026f8 <__libc_init_array+0x3c>)
 80026c4:	1b64      	subs	r4, r4, r5
 80026c6:	10a4      	asrs	r4, r4, #2
 80026c8:	42a6      	cmp	r6, r4
 80026ca:	d109      	bne.n	80026e0 <__libc_init_array+0x24>
 80026cc:	f000 fc7a 	bl	8002fc4 <_init>
 80026d0:	2600      	movs	r6, #0
 80026d2:	4d0a      	ldr	r5, [pc, #40]	; (80026fc <__libc_init_array+0x40>)
 80026d4:	4c0a      	ldr	r4, [pc, #40]	; (8002700 <__libc_init_array+0x44>)
 80026d6:	1b64      	subs	r4, r4, r5
 80026d8:	10a4      	asrs	r4, r4, #2
 80026da:	42a6      	cmp	r6, r4
 80026dc:	d105      	bne.n	80026ea <__libc_init_array+0x2e>
 80026de:	bd70      	pop	{r4, r5, r6, pc}
 80026e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e4:	4798      	blx	r3
 80026e6:	3601      	adds	r6, #1
 80026e8:	e7ee      	b.n	80026c8 <__libc_init_array+0xc>
 80026ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ee:	4798      	blx	r3
 80026f0:	3601      	adds	r6, #1
 80026f2:	e7f2      	b.n	80026da <__libc_init_array+0x1e>
 80026f4:	08006c40 	.word	0x08006c40
 80026f8:	08006c40 	.word	0x08006c40
 80026fc:	08006c40 	.word	0x08006c40
 8002700:	08006c44 	.word	0x08006c44

08002704 <__retarget_lock_acquire_recursive>:
 8002704:	4770      	bx	lr

08002706 <__retarget_lock_release_recursive>:
 8002706:	4770      	bx	lr

08002708 <_free_r>:
 8002708:	b538      	push	{r3, r4, r5, lr}
 800270a:	4605      	mov	r5, r0
 800270c:	2900      	cmp	r1, #0
 800270e:	d040      	beq.n	8002792 <_free_r+0x8a>
 8002710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002714:	1f0c      	subs	r4, r1, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	bfb8      	it	lt
 800271a:	18e4      	addlt	r4, r4, r3
 800271c:	f000 f8dc 	bl	80028d8 <__malloc_lock>
 8002720:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <_free_r+0x8c>)
 8002722:	6813      	ldr	r3, [r2, #0]
 8002724:	b933      	cbnz	r3, 8002734 <_free_r+0x2c>
 8002726:	6063      	str	r3, [r4, #4]
 8002728:	6014      	str	r4, [r2, #0]
 800272a:	4628      	mov	r0, r5
 800272c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002730:	f000 b8d8 	b.w	80028e4 <__malloc_unlock>
 8002734:	42a3      	cmp	r3, r4
 8002736:	d908      	bls.n	800274a <_free_r+0x42>
 8002738:	6820      	ldr	r0, [r4, #0]
 800273a:	1821      	adds	r1, r4, r0
 800273c:	428b      	cmp	r3, r1
 800273e:	bf01      	itttt	eq
 8002740:	6819      	ldreq	r1, [r3, #0]
 8002742:	685b      	ldreq	r3, [r3, #4]
 8002744:	1809      	addeq	r1, r1, r0
 8002746:	6021      	streq	r1, [r4, #0]
 8002748:	e7ed      	b.n	8002726 <_free_r+0x1e>
 800274a:	461a      	mov	r2, r3
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	b10b      	cbz	r3, 8002754 <_free_r+0x4c>
 8002750:	42a3      	cmp	r3, r4
 8002752:	d9fa      	bls.n	800274a <_free_r+0x42>
 8002754:	6811      	ldr	r1, [r2, #0]
 8002756:	1850      	adds	r0, r2, r1
 8002758:	42a0      	cmp	r0, r4
 800275a:	d10b      	bne.n	8002774 <_free_r+0x6c>
 800275c:	6820      	ldr	r0, [r4, #0]
 800275e:	4401      	add	r1, r0
 8002760:	1850      	adds	r0, r2, r1
 8002762:	4283      	cmp	r3, r0
 8002764:	6011      	str	r1, [r2, #0]
 8002766:	d1e0      	bne.n	800272a <_free_r+0x22>
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4408      	add	r0, r1
 800276e:	6010      	str	r0, [r2, #0]
 8002770:	6053      	str	r3, [r2, #4]
 8002772:	e7da      	b.n	800272a <_free_r+0x22>
 8002774:	d902      	bls.n	800277c <_free_r+0x74>
 8002776:	230c      	movs	r3, #12
 8002778:	602b      	str	r3, [r5, #0]
 800277a:	e7d6      	b.n	800272a <_free_r+0x22>
 800277c:	6820      	ldr	r0, [r4, #0]
 800277e:	1821      	adds	r1, r4, r0
 8002780:	428b      	cmp	r3, r1
 8002782:	bf01      	itttt	eq
 8002784:	6819      	ldreq	r1, [r3, #0]
 8002786:	685b      	ldreq	r3, [r3, #4]
 8002788:	1809      	addeq	r1, r1, r0
 800278a:	6021      	streq	r1, [r4, #0]
 800278c:	6063      	str	r3, [r4, #4]
 800278e:	6054      	str	r4, [r2, #4]
 8002790:	e7cb      	b.n	800272a <_free_r+0x22>
 8002792:	bd38      	pop	{r3, r4, r5, pc}
 8002794:	200001f0 	.word	0x200001f0

08002798 <sbrk_aligned>:
 8002798:	b570      	push	{r4, r5, r6, lr}
 800279a:	4e0e      	ldr	r6, [pc, #56]	; (80027d4 <sbrk_aligned+0x3c>)
 800279c:	460c      	mov	r4, r1
 800279e:	6831      	ldr	r1, [r6, #0]
 80027a0:	4605      	mov	r5, r0
 80027a2:	b911      	cbnz	r1, 80027aa <sbrk_aligned+0x12>
 80027a4:	f000 fbaa 	bl	8002efc <_sbrk_r>
 80027a8:	6030      	str	r0, [r6, #0]
 80027aa:	4621      	mov	r1, r4
 80027ac:	4628      	mov	r0, r5
 80027ae:	f000 fba5 	bl	8002efc <_sbrk_r>
 80027b2:	1c43      	adds	r3, r0, #1
 80027b4:	d00a      	beq.n	80027cc <sbrk_aligned+0x34>
 80027b6:	1cc4      	adds	r4, r0, #3
 80027b8:	f024 0403 	bic.w	r4, r4, #3
 80027bc:	42a0      	cmp	r0, r4
 80027be:	d007      	beq.n	80027d0 <sbrk_aligned+0x38>
 80027c0:	1a21      	subs	r1, r4, r0
 80027c2:	4628      	mov	r0, r5
 80027c4:	f000 fb9a 	bl	8002efc <_sbrk_r>
 80027c8:	3001      	adds	r0, #1
 80027ca:	d101      	bne.n	80027d0 <sbrk_aligned+0x38>
 80027cc:	f04f 34ff 	mov.w	r4, #4294967295
 80027d0:	4620      	mov	r0, r4
 80027d2:	bd70      	pop	{r4, r5, r6, pc}
 80027d4:	200001f4 	.word	0x200001f4

080027d8 <_malloc_r>:
 80027d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027dc:	1ccd      	adds	r5, r1, #3
 80027de:	f025 0503 	bic.w	r5, r5, #3
 80027e2:	3508      	adds	r5, #8
 80027e4:	2d0c      	cmp	r5, #12
 80027e6:	bf38      	it	cc
 80027e8:	250c      	movcc	r5, #12
 80027ea:	2d00      	cmp	r5, #0
 80027ec:	4607      	mov	r7, r0
 80027ee:	db01      	blt.n	80027f4 <_malloc_r+0x1c>
 80027f0:	42a9      	cmp	r1, r5
 80027f2:	d905      	bls.n	8002800 <_malloc_r+0x28>
 80027f4:	230c      	movs	r3, #12
 80027f6:	2600      	movs	r6, #0
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	4630      	mov	r0, r6
 80027fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002800:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80028d4 <_malloc_r+0xfc>
 8002804:	f000 f868 	bl	80028d8 <__malloc_lock>
 8002808:	f8d8 3000 	ldr.w	r3, [r8]
 800280c:	461c      	mov	r4, r3
 800280e:	bb5c      	cbnz	r4, 8002868 <_malloc_r+0x90>
 8002810:	4629      	mov	r1, r5
 8002812:	4638      	mov	r0, r7
 8002814:	f7ff ffc0 	bl	8002798 <sbrk_aligned>
 8002818:	1c43      	adds	r3, r0, #1
 800281a:	4604      	mov	r4, r0
 800281c:	d155      	bne.n	80028ca <_malloc_r+0xf2>
 800281e:	f8d8 4000 	ldr.w	r4, [r8]
 8002822:	4626      	mov	r6, r4
 8002824:	2e00      	cmp	r6, #0
 8002826:	d145      	bne.n	80028b4 <_malloc_r+0xdc>
 8002828:	2c00      	cmp	r4, #0
 800282a:	d048      	beq.n	80028be <_malloc_r+0xe6>
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	4631      	mov	r1, r6
 8002830:	4638      	mov	r0, r7
 8002832:	eb04 0903 	add.w	r9, r4, r3
 8002836:	f000 fb61 	bl	8002efc <_sbrk_r>
 800283a:	4581      	cmp	r9, r0
 800283c:	d13f      	bne.n	80028be <_malloc_r+0xe6>
 800283e:	6821      	ldr	r1, [r4, #0]
 8002840:	4638      	mov	r0, r7
 8002842:	1a6d      	subs	r5, r5, r1
 8002844:	4629      	mov	r1, r5
 8002846:	f7ff ffa7 	bl	8002798 <sbrk_aligned>
 800284a:	3001      	adds	r0, #1
 800284c:	d037      	beq.n	80028be <_malloc_r+0xe6>
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	442b      	add	r3, r5
 8002852:	6023      	str	r3, [r4, #0]
 8002854:	f8d8 3000 	ldr.w	r3, [r8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d038      	beq.n	80028ce <_malloc_r+0xf6>
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	42a2      	cmp	r2, r4
 8002860:	d12b      	bne.n	80028ba <_malloc_r+0xe2>
 8002862:	2200      	movs	r2, #0
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	e00f      	b.n	8002888 <_malloc_r+0xb0>
 8002868:	6822      	ldr	r2, [r4, #0]
 800286a:	1b52      	subs	r2, r2, r5
 800286c:	d41f      	bmi.n	80028ae <_malloc_r+0xd6>
 800286e:	2a0b      	cmp	r2, #11
 8002870:	d917      	bls.n	80028a2 <_malloc_r+0xca>
 8002872:	1961      	adds	r1, r4, r5
 8002874:	42a3      	cmp	r3, r4
 8002876:	6025      	str	r5, [r4, #0]
 8002878:	bf18      	it	ne
 800287a:	6059      	strne	r1, [r3, #4]
 800287c:	6863      	ldr	r3, [r4, #4]
 800287e:	bf08      	it	eq
 8002880:	f8c8 1000 	streq.w	r1, [r8]
 8002884:	5162      	str	r2, [r4, r5]
 8002886:	604b      	str	r3, [r1, #4]
 8002888:	4638      	mov	r0, r7
 800288a:	f104 060b 	add.w	r6, r4, #11
 800288e:	f000 f829 	bl	80028e4 <__malloc_unlock>
 8002892:	f026 0607 	bic.w	r6, r6, #7
 8002896:	1d23      	adds	r3, r4, #4
 8002898:	1af2      	subs	r2, r6, r3
 800289a:	d0ae      	beq.n	80027fa <_malloc_r+0x22>
 800289c:	1b9b      	subs	r3, r3, r6
 800289e:	50a3      	str	r3, [r4, r2]
 80028a0:	e7ab      	b.n	80027fa <_malloc_r+0x22>
 80028a2:	42a3      	cmp	r3, r4
 80028a4:	6862      	ldr	r2, [r4, #4]
 80028a6:	d1dd      	bne.n	8002864 <_malloc_r+0x8c>
 80028a8:	f8c8 2000 	str.w	r2, [r8]
 80028ac:	e7ec      	b.n	8002888 <_malloc_r+0xb0>
 80028ae:	4623      	mov	r3, r4
 80028b0:	6864      	ldr	r4, [r4, #4]
 80028b2:	e7ac      	b.n	800280e <_malloc_r+0x36>
 80028b4:	4634      	mov	r4, r6
 80028b6:	6876      	ldr	r6, [r6, #4]
 80028b8:	e7b4      	b.n	8002824 <_malloc_r+0x4c>
 80028ba:	4613      	mov	r3, r2
 80028bc:	e7cc      	b.n	8002858 <_malloc_r+0x80>
 80028be:	230c      	movs	r3, #12
 80028c0:	4638      	mov	r0, r7
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	f000 f80e 	bl	80028e4 <__malloc_unlock>
 80028c8:	e797      	b.n	80027fa <_malloc_r+0x22>
 80028ca:	6025      	str	r5, [r4, #0]
 80028cc:	e7dc      	b.n	8002888 <_malloc_r+0xb0>
 80028ce:	605b      	str	r3, [r3, #4]
 80028d0:	deff      	udf	#255	; 0xff
 80028d2:	bf00      	nop
 80028d4:	200001f0 	.word	0x200001f0

080028d8 <__malloc_lock>:
 80028d8:	4801      	ldr	r0, [pc, #4]	; (80028e0 <__malloc_lock+0x8>)
 80028da:	f7ff bf13 	b.w	8002704 <__retarget_lock_acquire_recursive>
 80028de:	bf00      	nop
 80028e0:	200001ec 	.word	0x200001ec

080028e4 <__malloc_unlock>:
 80028e4:	4801      	ldr	r0, [pc, #4]	; (80028ec <__malloc_unlock+0x8>)
 80028e6:	f7ff bf0e 	b.w	8002706 <__retarget_lock_release_recursive>
 80028ea:	bf00      	nop
 80028ec:	200001ec 	.word	0x200001ec

080028f0 <__ssputs_r>:
 80028f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028f4:	461f      	mov	r7, r3
 80028f6:	688e      	ldr	r6, [r1, #8]
 80028f8:	4682      	mov	sl, r0
 80028fa:	42be      	cmp	r6, r7
 80028fc:	460c      	mov	r4, r1
 80028fe:	4690      	mov	r8, r2
 8002900:	680b      	ldr	r3, [r1, #0]
 8002902:	d82c      	bhi.n	800295e <__ssputs_r+0x6e>
 8002904:	898a      	ldrh	r2, [r1, #12]
 8002906:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800290a:	d026      	beq.n	800295a <__ssputs_r+0x6a>
 800290c:	6965      	ldr	r5, [r4, #20]
 800290e:	6909      	ldr	r1, [r1, #16]
 8002910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002914:	eba3 0901 	sub.w	r9, r3, r1
 8002918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800291c:	1c7b      	adds	r3, r7, #1
 800291e:	444b      	add	r3, r9
 8002920:	106d      	asrs	r5, r5, #1
 8002922:	429d      	cmp	r5, r3
 8002924:	bf38      	it	cc
 8002926:	461d      	movcc	r5, r3
 8002928:	0553      	lsls	r3, r2, #21
 800292a:	d527      	bpl.n	800297c <__ssputs_r+0x8c>
 800292c:	4629      	mov	r1, r5
 800292e:	f7ff ff53 	bl	80027d8 <_malloc_r>
 8002932:	4606      	mov	r6, r0
 8002934:	b360      	cbz	r0, 8002990 <__ssputs_r+0xa0>
 8002936:	464a      	mov	r2, r9
 8002938:	6921      	ldr	r1, [r4, #16]
 800293a:	f000 fafd 	bl	8002f38 <memcpy>
 800293e:	89a3      	ldrh	r3, [r4, #12]
 8002940:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002948:	81a3      	strh	r3, [r4, #12]
 800294a:	6126      	str	r6, [r4, #16]
 800294c:	444e      	add	r6, r9
 800294e:	6026      	str	r6, [r4, #0]
 8002950:	463e      	mov	r6, r7
 8002952:	6165      	str	r5, [r4, #20]
 8002954:	eba5 0509 	sub.w	r5, r5, r9
 8002958:	60a5      	str	r5, [r4, #8]
 800295a:	42be      	cmp	r6, r7
 800295c:	d900      	bls.n	8002960 <__ssputs_r+0x70>
 800295e:	463e      	mov	r6, r7
 8002960:	4632      	mov	r2, r6
 8002962:	4641      	mov	r1, r8
 8002964:	6820      	ldr	r0, [r4, #0]
 8002966:	f000 faaf 	bl	8002ec8 <memmove>
 800296a:	2000      	movs	r0, #0
 800296c:	68a3      	ldr	r3, [r4, #8]
 800296e:	1b9b      	subs	r3, r3, r6
 8002970:	60a3      	str	r3, [r4, #8]
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	4433      	add	r3, r6
 8002976:	6023      	str	r3, [r4, #0]
 8002978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800297c:	462a      	mov	r2, r5
 800297e:	f000 fae9 	bl	8002f54 <_realloc_r>
 8002982:	4606      	mov	r6, r0
 8002984:	2800      	cmp	r0, #0
 8002986:	d1e0      	bne.n	800294a <__ssputs_r+0x5a>
 8002988:	4650      	mov	r0, sl
 800298a:	6921      	ldr	r1, [r4, #16]
 800298c:	f7ff febc 	bl	8002708 <_free_r>
 8002990:	230c      	movs	r3, #12
 8002992:	f8ca 3000 	str.w	r3, [sl]
 8002996:	89a3      	ldrh	r3, [r4, #12]
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a0:	81a3      	strh	r3, [r4, #12]
 80029a2:	e7e9      	b.n	8002978 <__ssputs_r+0x88>

080029a4 <_svfiprintf_r>:
 80029a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029a8:	4698      	mov	r8, r3
 80029aa:	898b      	ldrh	r3, [r1, #12]
 80029ac:	4607      	mov	r7, r0
 80029ae:	061b      	lsls	r3, r3, #24
 80029b0:	460d      	mov	r5, r1
 80029b2:	4614      	mov	r4, r2
 80029b4:	b09d      	sub	sp, #116	; 0x74
 80029b6:	d50e      	bpl.n	80029d6 <_svfiprintf_r+0x32>
 80029b8:	690b      	ldr	r3, [r1, #16]
 80029ba:	b963      	cbnz	r3, 80029d6 <_svfiprintf_r+0x32>
 80029bc:	2140      	movs	r1, #64	; 0x40
 80029be:	f7ff ff0b 	bl	80027d8 <_malloc_r>
 80029c2:	6028      	str	r0, [r5, #0]
 80029c4:	6128      	str	r0, [r5, #16]
 80029c6:	b920      	cbnz	r0, 80029d2 <_svfiprintf_r+0x2e>
 80029c8:	230c      	movs	r3, #12
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	e0d0      	b.n	8002b74 <_svfiprintf_r+0x1d0>
 80029d2:	2340      	movs	r3, #64	; 0x40
 80029d4:	616b      	str	r3, [r5, #20]
 80029d6:	2300      	movs	r3, #0
 80029d8:	9309      	str	r3, [sp, #36]	; 0x24
 80029da:	2320      	movs	r3, #32
 80029dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029e0:	2330      	movs	r3, #48	; 0x30
 80029e2:	f04f 0901 	mov.w	r9, #1
 80029e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80029ea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002b8c <_svfiprintf_r+0x1e8>
 80029ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029f2:	4623      	mov	r3, r4
 80029f4:	469a      	mov	sl, r3
 80029f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029fa:	b10a      	cbz	r2, 8002a00 <_svfiprintf_r+0x5c>
 80029fc:	2a25      	cmp	r2, #37	; 0x25
 80029fe:	d1f9      	bne.n	80029f4 <_svfiprintf_r+0x50>
 8002a00:	ebba 0b04 	subs.w	fp, sl, r4
 8002a04:	d00b      	beq.n	8002a1e <_svfiprintf_r+0x7a>
 8002a06:	465b      	mov	r3, fp
 8002a08:	4622      	mov	r2, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	4638      	mov	r0, r7
 8002a0e:	f7ff ff6f 	bl	80028f0 <__ssputs_r>
 8002a12:	3001      	adds	r0, #1
 8002a14:	f000 80a9 	beq.w	8002b6a <_svfiprintf_r+0x1c6>
 8002a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a1a:	445a      	add	r2, fp
 8002a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8002a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80a1 	beq.w	8002b6a <_svfiprintf_r+0x1c6>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a32:	f10a 0a01 	add.w	sl, sl, #1
 8002a36:	9304      	str	r3, [sp, #16]
 8002a38:	9307      	str	r3, [sp, #28]
 8002a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8002a40:	4654      	mov	r4, sl
 8002a42:	2205      	movs	r2, #5
 8002a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a48:	4850      	ldr	r0, [pc, #320]	; (8002b8c <_svfiprintf_r+0x1e8>)
 8002a4a:	f000 fa67 	bl	8002f1c <memchr>
 8002a4e:	9a04      	ldr	r2, [sp, #16]
 8002a50:	b9d8      	cbnz	r0, 8002a8a <_svfiprintf_r+0xe6>
 8002a52:	06d0      	lsls	r0, r2, #27
 8002a54:	bf44      	itt	mi
 8002a56:	2320      	movmi	r3, #32
 8002a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a5c:	0711      	lsls	r1, r2, #28
 8002a5e:	bf44      	itt	mi
 8002a60:	232b      	movmi	r3, #43	; 0x2b
 8002a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a66:	f89a 3000 	ldrb.w	r3, [sl]
 8002a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a6c:	d015      	beq.n	8002a9a <_svfiprintf_r+0xf6>
 8002a6e:	4654      	mov	r4, sl
 8002a70:	2000      	movs	r0, #0
 8002a72:	f04f 0c0a 	mov.w	ip, #10
 8002a76:	9a07      	ldr	r2, [sp, #28]
 8002a78:	4621      	mov	r1, r4
 8002a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a7e:	3b30      	subs	r3, #48	; 0x30
 8002a80:	2b09      	cmp	r3, #9
 8002a82:	d94d      	bls.n	8002b20 <_svfiprintf_r+0x17c>
 8002a84:	b1b0      	cbz	r0, 8002ab4 <_svfiprintf_r+0x110>
 8002a86:	9207      	str	r2, [sp, #28]
 8002a88:	e014      	b.n	8002ab4 <_svfiprintf_r+0x110>
 8002a8a:	eba0 0308 	sub.w	r3, r0, r8
 8002a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8002a92:	4313      	orrs	r3, r2
 8002a94:	46a2      	mov	sl, r4
 8002a96:	9304      	str	r3, [sp, #16]
 8002a98:	e7d2      	b.n	8002a40 <_svfiprintf_r+0x9c>
 8002a9a:	9b03      	ldr	r3, [sp, #12]
 8002a9c:	1d19      	adds	r1, r3, #4
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	9103      	str	r1, [sp, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bfbb      	ittet	lt
 8002aa6:	425b      	neglt	r3, r3
 8002aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8002aac:	9307      	strge	r3, [sp, #28]
 8002aae:	9307      	strlt	r3, [sp, #28]
 8002ab0:	bfb8      	it	lt
 8002ab2:	9204      	strlt	r2, [sp, #16]
 8002ab4:	7823      	ldrb	r3, [r4, #0]
 8002ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ab8:	d10c      	bne.n	8002ad4 <_svfiprintf_r+0x130>
 8002aba:	7863      	ldrb	r3, [r4, #1]
 8002abc:	2b2a      	cmp	r3, #42	; 0x2a
 8002abe:	d134      	bne.n	8002b2a <_svfiprintf_r+0x186>
 8002ac0:	9b03      	ldr	r3, [sp, #12]
 8002ac2:	3402      	adds	r4, #2
 8002ac4:	1d1a      	adds	r2, r3, #4
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	9203      	str	r2, [sp, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bfb8      	it	lt
 8002ace:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ad2:	9305      	str	r3, [sp, #20]
 8002ad4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002b90 <_svfiprintf_r+0x1ec>
 8002ad8:	2203      	movs	r2, #3
 8002ada:	4650      	mov	r0, sl
 8002adc:	7821      	ldrb	r1, [r4, #0]
 8002ade:	f000 fa1d 	bl	8002f1c <memchr>
 8002ae2:	b138      	cbz	r0, 8002af4 <_svfiprintf_r+0x150>
 8002ae4:	2240      	movs	r2, #64	; 0x40
 8002ae6:	9b04      	ldr	r3, [sp, #16]
 8002ae8:	eba0 000a 	sub.w	r0, r0, sl
 8002aec:	4082      	lsls	r2, r0
 8002aee:	4313      	orrs	r3, r2
 8002af0:	3401      	adds	r4, #1
 8002af2:	9304      	str	r3, [sp, #16]
 8002af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002af8:	2206      	movs	r2, #6
 8002afa:	4826      	ldr	r0, [pc, #152]	; (8002b94 <_svfiprintf_r+0x1f0>)
 8002afc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b00:	f000 fa0c 	bl	8002f1c <memchr>
 8002b04:	2800      	cmp	r0, #0
 8002b06:	d038      	beq.n	8002b7a <_svfiprintf_r+0x1d6>
 8002b08:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <_svfiprintf_r+0x1f4>)
 8002b0a:	bb1b      	cbnz	r3, 8002b54 <_svfiprintf_r+0x1b0>
 8002b0c:	9b03      	ldr	r3, [sp, #12]
 8002b0e:	3307      	adds	r3, #7
 8002b10:	f023 0307 	bic.w	r3, r3, #7
 8002b14:	3308      	adds	r3, #8
 8002b16:	9303      	str	r3, [sp, #12]
 8002b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b1a:	4433      	add	r3, r6
 8002b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b1e:	e768      	b.n	80029f2 <_svfiprintf_r+0x4e>
 8002b20:	460c      	mov	r4, r1
 8002b22:	2001      	movs	r0, #1
 8002b24:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b28:	e7a6      	b.n	8002a78 <_svfiprintf_r+0xd4>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f04f 0c0a 	mov.w	ip, #10
 8002b30:	4619      	mov	r1, r3
 8002b32:	3401      	adds	r4, #1
 8002b34:	9305      	str	r3, [sp, #20]
 8002b36:	4620      	mov	r0, r4
 8002b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b3c:	3a30      	subs	r2, #48	; 0x30
 8002b3e:	2a09      	cmp	r2, #9
 8002b40:	d903      	bls.n	8002b4a <_svfiprintf_r+0x1a6>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0c6      	beq.n	8002ad4 <_svfiprintf_r+0x130>
 8002b46:	9105      	str	r1, [sp, #20]
 8002b48:	e7c4      	b.n	8002ad4 <_svfiprintf_r+0x130>
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b52:	e7f0      	b.n	8002b36 <_svfiprintf_r+0x192>
 8002b54:	ab03      	add	r3, sp, #12
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	462a      	mov	r2, r5
 8002b5a:	4638      	mov	r0, r7
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <_svfiprintf_r+0x1f8>)
 8002b5e:	a904      	add	r1, sp, #16
 8002b60:	f3af 8000 	nop.w
 8002b64:	1c42      	adds	r2, r0, #1
 8002b66:	4606      	mov	r6, r0
 8002b68:	d1d6      	bne.n	8002b18 <_svfiprintf_r+0x174>
 8002b6a:	89ab      	ldrh	r3, [r5, #12]
 8002b6c:	065b      	lsls	r3, r3, #25
 8002b6e:	f53f af2d 	bmi.w	80029cc <_svfiprintf_r+0x28>
 8002b72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b74:	b01d      	add	sp, #116	; 0x74
 8002b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b7a:	ab03      	add	r3, sp, #12
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	462a      	mov	r2, r5
 8002b80:	4638      	mov	r0, r7
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <_svfiprintf_r+0x1f8>)
 8002b84:	a904      	add	r1, sp, #16
 8002b86:	f000 f87d 	bl	8002c84 <_printf_i>
 8002b8a:	e7eb      	b.n	8002b64 <_svfiprintf_r+0x1c0>
 8002b8c:	08006c0a 	.word	0x08006c0a
 8002b90:	08006c10 	.word	0x08006c10
 8002b94:	08006c14 	.word	0x08006c14
 8002b98:	00000000 	.word	0x00000000
 8002b9c:	080028f1 	.word	0x080028f1

08002ba0 <_printf_common>:
 8002ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba4:	4616      	mov	r6, r2
 8002ba6:	4699      	mov	r9, r3
 8002ba8:	688a      	ldr	r2, [r1, #8]
 8002baa:	690b      	ldr	r3, [r1, #16]
 8002bac:	4607      	mov	r7, r0
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	bfb8      	it	lt
 8002bb2:	4613      	movlt	r3, r2
 8002bb4:	6033      	str	r3, [r6, #0]
 8002bb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bba:	460c      	mov	r4, r1
 8002bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bc0:	b10a      	cbz	r2, 8002bc6 <_printf_common+0x26>
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	6033      	str	r3, [r6, #0]
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	0699      	lsls	r1, r3, #26
 8002bca:	bf42      	ittt	mi
 8002bcc:	6833      	ldrmi	r3, [r6, #0]
 8002bce:	3302      	addmi	r3, #2
 8002bd0:	6033      	strmi	r3, [r6, #0]
 8002bd2:	6825      	ldr	r5, [r4, #0]
 8002bd4:	f015 0506 	ands.w	r5, r5, #6
 8002bd8:	d106      	bne.n	8002be8 <_printf_common+0x48>
 8002bda:	f104 0a19 	add.w	sl, r4, #25
 8002bde:	68e3      	ldr	r3, [r4, #12]
 8002be0:	6832      	ldr	r2, [r6, #0]
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	42ab      	cmp	r3, r5
 8002be6:	dc2b      	bgt.n	8002c40 <_printf_common+0xa0>
 8002be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bec:	1e13      	subs	r3, r2, #0
 8002bee:	6822      	ldr	r2, [r4, #0]
 8002bf0:	bf18      	it	ne
 8002bf2:	2301      	movne	r3, #1
 8002bf4:	0692      	lsls	r2, r2, #26
 8002bf6:	d430      	bmi.n	8002c5a <_printf_common+0xba>
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	4638      	mov	r0, r7
 8002bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c00:	47c0      	blx	r8
 8002c02:	3001      	adds	r0, #1
 8002c04:	d023      	beq.n	8002c4e <_printf_common+0xae>
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	6922      	ldr	r2, [r4, #16]
 8002c0a:	f003 0306 	and.w	r3, r3, #6
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	bf14      	ite	ne
 8002c12:	2500      	movne	r5, #0
 8002c14:	6833      	ldreq	r3, [r6, #0]
 8002c16:	f04f 0600 	mov.w	r6, #0
 8002c1a:	bf08      	it	eq
 8002c1c:	68e5      	ldreq	r5, [r4, #12]
 8002c1e:	f104 041a 	add.w	r4, r4, #26
 8002c22:	bf08      	it	eq
 8002c24:	1aed      	subeq	r5, r5, r3
 8002c26:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c2a:	bf08      	it	eq
 8002c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c30:	4293      	cmp	r3, r2
 8002c32:	bfc4      	itt	gt
 8002c34:	1a9b      	subgt	r3, r3, r2
 8002c36:	18ed      	addgt	r5, r5, r3
 8002c38:	42b5      	cmp	r5, r6
 8002c3a:	d11a      	bne.n	8002c72 <_printf_common+0xd2>
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	e008      	b.n	8002c52 <_printf_common+0xb2>
 8002c40:	2301      	movs	r3, #1
 8002c42:	4652      	mov	r2, sl
 8002c44:	4649      	mov	r1, r9
 8002c46:	4638      	mov	r0, r7
 8002c48:	47c0      	blx	r8
 8002c4a:	3001      	adds	r0, #1
 8002c4c:	d103      	bne.n	8002c56 <_printf_common+0xb6>
 8002c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c56:	3501      	adds	r5, #1
 8002c58:	e7c1      	b.n	8002bde <_printf_common+0x3e>
 8002c5a:	2030      	movs	r0, #48	; 0x30
 8002c5c:	18e1      	adds	r1, r4, r3
 8002c5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c68:	4422      	add	r2, r4
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c70:	e7c2      	b.n	8002bf8 <_printf_common+0x58>
 8002c72:	2301      	movs	r3, #1
 8002c74:	4622      	mov	r2, r4
 8002c76:	4649      	mov	r1, r9
 8002c78:	4638      	mov	r0, r7
 8002c7a:	47c0      	blx	r8
 8002c7c:	3001      	adds	r0, #1
 8002c7e:	d0e6      	beq.n	8002c4e <_printf_common+0xae>
 8002c80:	3601      	adds	r6, #1
 8002c82:	e7d9      	b.n	8002c38 <_printf_common+0x98>

08002c84 <_printf_i>:
 8002c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c88:	7e0f      	ldrb	r7, [r1, #24]
 8002c8a:	4691      	mov	r9, r2
 8002c8c:	2f78      	cmp	r7, #120	; 0x78
 8002c8e:	4680      	mov	r8, r0
 8002c90:	460c      	mov	r4, r1
 8002c92:	469a      	mov	sl, r3
 8002c94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c9a:	d807      	bhi.n	8002cac <_printf_i+0x28>
 8002c9c:	2f62      	cmp	r7, #98	; 0x62
 8002c9e:	d80a      	bhi.n	8002cb6 <_printf_i+0x32>
 8002ca0:	2f00      	cmp	r7, #0
 8002ca2:	f000 80d5 	beq.w	8002e50 <_printf_i+0x1cc>
 8002ca6:	2f58      	cmp	r7, #88	; 0x58
 8002ca8:	f000 80c1 	beq.w	8002e2e <_printf_i+0x1aa>
 8002cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002cb4:	e03a      	b.n	8002d2c <_printf_i+0xa8>
 8002cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002cba:	2b15      	cmp	r3, #21
 8002cbc:	d8f6      	bhi.n	8002cac <_printf_i+0x28>
 8002cbe:	a101      	add	r1, pc, #4	; (adr r1, 8002cc4 <_printf_i+0x40>)
 8002cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cc4:	08002d1d 	.word	0x08002d1d
 8002cc8:	08002d31 	.word	0x08002d31
 8002ccc:	08002cad 	.word	0x08002cad
 8002cd0:	08002cad 	.word	0x08002cad
 8002cd4:	08002cad 	.word	0x08002cad
 8002cd8:	08002cad 	.word	0x08002cad
 8002cdc:	08002d31 	.word	0x08002d31
 8002ce0:	08002cad 	.word	0x08002cad
 8002ce4:	08002cad 	.word	0x08002cad
 8002ce8:	08002cad 	.word	0x08002cad
 8002cec:	08002cad 	.word	0x08002cad
 8002cf0:	08002e37 	.word	0x08002e37
 8002cf4:	08002d5d 	.word	0x08002d5d
 8002cf8:	08002df1 	.word	0x08002df1
 8002cfc:	08002cad 	.word	0x08002cad
 8002d00:	08002cad 	.word	0x08002cad
 8002d04:	08002e59 	.word	0x08002e59
 8002d08:	08002cad 	.word	0x08002cad
 8002d0c:	08002d5d 	.word	0x08002d5d
 8002d10:	08002cad 	.word	0x08002cad
 8002d14:	08002cad 	.word	0x08002cad
 8002d18:	08002df9 	.word	0x08002df9
 8002d1c:	682b      	ldr	r3, [r5, #0]
 8002d1e:	1d1a      	adds	r2, r3, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	602a      	str	r2, [r5, #0]
 8002d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0a0      	b.n	8002e72 <_printf_i+0x1ee>
 8002d30:	6820      	ldr	r0, [r4, #0]
 8002d32:	682b      	ldr	r3, [r5, #0]
 8002d34:	0607      	lsls	r7, r0, #24
 8002d36:	f103 0104 	add.w	r1, r3, #4
 8002d3a:	6029      	str	r1, [r5, #0]
 8002d3c:	d501      	bpl.n	8002d42 <_printf_i+0xbe>
 8002d3e:	681e      	ldr	r6, [r3, #0]
 8002d40:	e003      	b.n	8002d4a <_printf_i+0xc6>
 8002d42:	0646      	lsls	r6, r0, #25
 8002d44:	d5fb      	bpl.n	8002d3e <_printf_i+0xba>
 8002d46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d4a:	2e00      	cmp	r6, #0
 8002d4c:	da03      	bge.n	8002d56 <_printf_i+0xd2>
 8002d4e:	232d      	movs	r3, #45	; 0x2d
 8002d50:	4276      	negs	r6, r6
 8002d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d56:	230a      	movs	r3, #10
 8002d58:	4859      	ldr	r0, [pc, #356]	; (8002ec0 <_printf_i+0x23c>)
 8002d5a:	e012      	b.n	8002d82 <_printf_i+0xfe>
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	6820      	ldr	r0, [r4, #0]
 8002d60:	1d19      	adds	r1, r3, #4
 8002d62:	6029      	str	r1, [r5, #0]
 8002d64:	0605      	lsls	r5, r0, #24
 8002d66:	d501      	bpl.n	8002d6c <_printf_i+0xe8>
 8002d68:	681e      	ldr	r6, [r3, #0]
 8002d6a:	e002      	b.n	8002d72 <_printf_i+0xee>
 8002d6c:	0641      	lsls	r1, r0, #25
 8002d6e:	d5fb      	bpl.n	8002d68 <_printf_i+0xe4>
 8002d70:	881e      	ldrh	r6, [r3, #0]
 8002d72:	2f6f      	cmp	r7, #111	; 0x6f
 8002d74:	bf0c      	ite	eq
 8002d76:	2308      	moveq	r3, #8
 8002d78:	230a      	movne	r3, #10
 8002d7a:	4851      	ldr	r0, [pc, #324]	; (8002ec0 <_printf_i+0x23c>)
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d82:	6865      	ldr	r5, [r4, #4]
 8002d84:	2d00      	cmp	r5, #0
 8002d86:	bfa8      	it	ge
 8002d88:	6821      	ldrge	r1, [r4, #0]
 8002d8a:	60a5      	str	r5, [r4, #8]
 8002d8c:	bfa4      	itt	ge
 8002d8e:	f021 0104 	bicge.w	r1, r1, #4
 8002d92:	6021      	strge	r1, [r4, #0]
 8002d94:	b90e      	cbnz	r6, 8002d9a <_printf_i+0x116>
 8002d96:	2d00      	cmp	r5, #0
 8002d98:	d04b      	beq.n	8002e32 <_printf_i+0x1ae>
 8002d9a:	4615      	mov	r5, r2
 8002d9c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002da0:	fb03 6711 	mls	r7, r3, r1, r6
 8002da4:	5dc7      	ldrb	r7, [r0, r7]
 8002da6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002daa:	4637      	mov	r7, r6
 8002dac:	42bb      	cmp	r3, r7
 8002dae:	460e      	mov	r6, r1
 8002db0:	d9f4      	bls.n	8002d9c <_printf_i+0x118>
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d10b      	bne.n	8002dce <_printf_i+0x14a>
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	07de      	lsls	r6, r3, #31
 8002dba:	d508      	bpl.n	8002dce <_printf_i+0x14a>
 8002dbc:	6923      	ldr	r3, [r4, #16]
 8002dbe:	6861      	ldr	r1, [r4, #4]
 8002dc0:	4299      	cmp	r1, r3
 8002dc2:	bfde      	ittt	le
 8002dc4:	2330      	movle	r3, #48	; 0x30
 8002dc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002dca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002dce:	1b52      	subs	r2, r2, r5
 8002dd0:	6122      	str	r2, [r4, #16]
 8002dd2:	464b      	mov	r3, r9
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	4640      	mov	r0, r8
 8002dd8:	f8cd a000 	str.w	sl, [sp]
 8002ddc:	aa03      	add	r2, sp, #12
 8002dde:	f7ff fedf 	bl	8002ba0 <_printf_common>
 8002de2:	3001      	adds	r0, #1
 8002de4:	d14a      	bne.n	8002e7c <_printf_i+0x1f8>
 8002de6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dea:	b004      	add	sp, #16
 8002dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	f043 0320 	orr.w	r3, r3, #32
 8002df6:	6023      	str	r3, [r4, #0]
 8002df8:	2778      	movs	r7, #120	; 0x78
 8002dfa:	4832      	ldr	r0, [pc, #200]	; (8002ec4 <_printf_i+0x240>)
 8002dfc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	6829      	ldr	r1, [r5, #0]
 8002e04:	061f      	lsls	r7, r3, #24
 8002e06:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e0a:	d402      	bmi.n	8002e12 <_printf_i+0x18e>
 8002e0c:	065f      	lsls	r7, r3, #25
 8002e0e:	bf48      	it	mi
 8002e10:	b2b6      	uxthmi	r6, r6
 8002e12:	07df      	lsls	r7, r3, #31
 8002e14:	bf48      	it	mi
 8002e16:	f043 0320 	orrmi.w	r3, r3, #32
 8002e1a:	6029      	str	r1, [r5, #0]
 8002e1c:	bf48      	it	mi
 8002e1e:	6023      	strmi	r3, [r4, #0]
 8002e20:	b91e      	cbnz	r6, 8002e2a <_printf_i+0x1a6>
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	f023 0320 	bic.w	r3, r3, #32
 8002e28:	6023      	str	r3, [r4, #0]
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	e7a6      	b.n	8002d7c <_printf_i+0xf8>
 8002e2e:	4824      	ldr	r0, [pc, #144]	; (8002ec0 <_printf_i+0x23c>)
 8002e30:	e7e4      	b.n	8002dfc <_printf_i+0x178>
 8002e32:	4615      	mov	r5, r2
 8002e34:	e7bd      	b.n	8002db2 <_printf_i+0x12e>
 8002e36:	682b      	ldr	r3, [r5, #0]
 8002e38:	6826      	ldr	r6, [r4, #0]
 8002e3a:	1d18      	adds	r0, r3, #4
 8002e3c:	6961      	ldr	r1, [r4, #20]
 8002e3e:	6028      	str	r0, [r5, #0]
 8002e40:	0635      	lsls	r5, r6, #24
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	d501      	bpl.n	8002e4a <_printf_i+0x1c6>
 8002e46:	6019      	str	r1, [r3, #0]
 8002e48:	e002      	b.n	8002e50 <_printf_i+0x1cc>
 8002e4a:	0670      	lsls	r0, r6, #25
 8002e4c:	d5fb      	bpl.n	8002e46 <_printf_i+0x1c2>
 8002e4e:	8019      	strh	r1, [r3, #0]
 8002e50:	2300      	movs	r3, #0
 8002e52:	4615      	mov	r5, r2
 8002e54:	6123      	str	r3, [r4, #16]
 8002e56:	e7bc      	b.n	8002dd2 <_printf_i+0x14e>
 8002e58:	682b      	ldr	r3, [r5, #0]
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	1d1a      	adds	r2, r3, #4
 8002e5e:	602a      	str	r2, [r5, #0]
 8002e60:	681d      	ldr	r5, [r3, #0]
 8002e62:	6862      	ldr	r2, [r4, #4]
 8002e64:	4628      	mov	r0, r5
 8002e66:	f000 f859 	bl	8002f1c <memchr>
 8002e6a:	b108      	cbz	r0, 8002e70 <_printf_i+0x1ec>
 8002e6c:	1b40      	subs	r0, r0, r5
 8002e6e:	6060      	str	r0, [r4, #4]
 8002e70:	6863      	ldr	r3, [r4, #4]
 8002e72:	6123      	str	r3, [r4, #16]
 8002e74:	2300      	movs	r3, #0
 8002e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e7a:	e7aa      	b.n	8002dd2 <_printf_i+0x14e>
 8002e7c:	462a      	mov	r2, r5
 8002e7e:	4649      	mov	r1, r9
 8002e80:	4640      	mov	r0, r8
 8002e82:	6923      	ldr	r3, [r4, #16]
 8002e84:	47d0      	blx	sl
 8002e86:	3001      	adds	r0, #1
 8002e88:	d0ad      	beq.n	8002de6 <_printf_i+0x162>
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	079b      	lsls	r3, r3, #30
 8002e8e:	d413      	bmi.n	8002eb8 <_printf_i+0x234>
 8002e90:	68e0      	ldr	r0, [r4, #12]
 8002e92:	9b03      	ldr	r3, [sp, #12]
 8002e94:	4298      	cmp	r0, r3
 8002e96:	bfb8      	it	lt
 8002e98:	4618      	movlt	r0, r3
 8002e9a:	e7a6      	b.n	8002dea <_printf_i+0x166>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	4632      	mov	r2, r6
 8002ea0:	4649      	mov	r1, r9
 8002ea2:	4640      	mov	r0, r8
 8002ea4:	47d0      	blx	sl
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	d09d      	beq.n	8002de6 <_printf_i+0x162>
 8002eaa:	3501      	adds	r5, #1
 8002eac:	68e3      	ldr	r3, [r4, #12]
 8002eae:	9903      	ldr	r1, [sp, #12]
 8002eb0:	1a5b      	subs	r3, r3, r1
 8002eb2:	42ab      	cmp	r3, r5
 8002eb4:	dcf2      	bgt.n	8002e9c <_printf_i+0x218>
 8002eb6:	e7eb      	b.n	8002e90 <_printf_i+0x20c>
 8002eb8:	2500      	movs	r5, #0
 8002eba:	f104 0619 	add.w	r6, r4, #25
 8002ebe:	e7f5      	b.n	8002eac <_printf_i+0x228>
 8002ec0:	08006c1b 	.word	0x08006c1b
 8002ec4:	08006c2c 	.word	0x08006c2c

08002ec8 <memmove>:
 8002ec8:	4288      	cmp	r0, r1
 8002eca:	b510      	push	{r4, lr}
 8002ecc:	eb01 0402 	add.w	r4, r1, r2
 8002ed0:	d902      	bls.n	8002ed8 <memmove+0x10>
 8002ed2:	4284      	cmp	r4, r0
 8002ed4:	4623      	mov	r3, r4
 8002ed6:	d807      	bhi.n	8002ee8 <memmove+0x20>
 8002ed8:	1e43      	subs	r3, r0, #1
 8002eda:	42a1      	cmp	r1, r4
 8002edc:	d008      	beq.n	8002ef0 <memmove+0x28>
 8002ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ee6:	e7f8      	b.n	8002eda <memmove+0x12>
 8002ee8:	4601      	mov	r1, r0
 8002eea:	4402      	add	r2, r0
 8002eec:	428a      	cmp	r2, r1
 8002eee:	d100      	bne.n	8002ef2 <memmove+0x2a>
 8002ef0:	bd10      	pop	{r4, pc}
 8002ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002efa:	e7f7      	b.n	8002eec <memmove+0x24>

08002efc <_sbrk_r>:
 8002efc:	b538      	push	{r3, r4, r5, lr}
 8002efe:	2300      	movs	r3, #0
 8002f00:	4d05      	ldr	r5, [pc, #20]	; (8002f18 <_sbrk_r+0x1c>)
 8002f02:	4604      	mov	r4, r0
 8002f04:	4608      	mov	r0, r1
 8002f06:	602b      	str	r3, [r5, #0]
 8002f08:	f7fe fc90 	bl	800182c <_sbrk>
 8002f0c:	1c43      	adds	r3, r0, #1
 8002f0e:	d102      	bne.n	8002f16 <_sbrk_r+0x1a>
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	b103      	cbz	r3, 8002f16 <_sbrk_r+0x1a>
 8002f14:	6023      	str	r3, [r4, #0]
 8002f16:	bd38      	pop	{r3, r4, r5, pc}
 8002f18:	200001e8 	.word	0x200001e8

08002f1c <memchr>:
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	b510      	push	{r4, lr}
 8002f20:	b2c9      	uxtb	r1, r1
 8002f22:	4402      	add	r2, r0
 8002f24:	4293      	cmp	r3, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	d101      	bne.n	8002f2e <memchr+0x12>
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	e003      	b.n	8002f36 <memchr+0x1a>
 8002f2e:	7804      	ldrb	r4, [r0, #0]
 8002f30:	3301      	adds	r3, #1
 8002f32:	428c      	cmp	r4, r1
 8002f34:	d1f6      	bne.n	8002f24 <memchr+0x8>
 8002f36:	bd10      	pop	{r4, pc}

08002f38 <memcpy>:
 8002f38:	440a      	add	r2, r1
 8002f3a:	4291      	cmp	r1, r2
 8002f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f40:	d100      	bne.n	8002f44 <memcpy+0xc>
 8002f42:	4770      	bx	lr
 8002f44:	b510      	push	{r4, lr}
 8002f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f4a:	4291      	cmp	r1, r2
 8002f4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f50:	d1f9      	bne.n	8002f46 <memcpy+0xe>
 8002f52:	bd10      	pop	{r4, pc}

08002f54 <_realloc_r>:
 8002f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f58:	4680      	mov	r8, r0
 8002f5a:	4614      	mov	r4, r2
 8002f5c:	460e      	mov	r6, r1
 8002f5e:	b921      	cbnz	r1, 8002f6a <_realloc_r+0x16>
 8002f60:	4611      	mov	r1, r2
 8002f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f66:	f7ff bc37 	b.w	80027d8 <_malloc_r>
 8002f6a:	b92a      	cbnz	r2, 8002f78 <_realloc_r+0x24>
 8002f6c:	f7ff fbcc 	bl	8002708 <_free_r>
 8002f70:	4625      	mov	r5, r4
 8002f72:	4628      	mov	r0, r5
 8002f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f78:	f000 f81b 	bl	8002fb2 <_malloc_usable_size_r>
 8002f7c:	4284      	cmp	r4, r0
 8002f7e:	4607      	mov	r7, r0
 8002f80:	d802      	bhi.n	8002f88 <_realloc_r+0x34>
 8002f82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002f86:	d812      	bhi.n	8002fae <_realloc_r+0x5a>
 8002f88:	4621      	mov	r1, r4
 8002f8a:	4640      	mov	r0, r8
 8002f8c:	f7ff fc24 	bl	80027d8 <_malloc_r>
 8002f90:	4605      	mov	r5, r0
 8002f92:	2800      	cmp	r0, #0
 8002f94:	d0ed      	beq.n	8002f72 <_realloc_r+0x1e>
 8002f96:	42bc      	cmp	r4, r7
 8002f98:	4622      	mov	r2, r4
 8002f9a:	4631      	mov	r1, r6
 8002f9c:	bf28      	it	cs
 8002f9e:	463a      	movcs	r2, r7
 8002fa0:	f7ff ffca 	bl	8002f38 <memcpy>
 8002fa4:	4631      	mov	r1, r6
 8002fa6:	4640      	mov	r0, r8
 8002fa8:	f7ff fbae 	bl	8002708 <_free_r>
 8002fac:	e7e1      	b.n	8002f72 <_realloc_r+0x1e>
 8002fae:	4635      	mov	r5, r6
 8002fb0:	e7df      	b.n	8002f72 <_realloc_r+0x1e>

08002fb2 <_malloc_usable_size_r>:
 8002fb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fb6:	1f18      	subs	r0, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bfbc      	itt	lt
 8002fbc:	580b      	ldrlt	r3, [r1, r0]
 8002fbe:	18c0      	addlt	r0, r0, r3
 8002fc0:	4770      	bx	lr
	...

08002fc4 <_init>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	bf00      	nop
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr

08002fd0 <_fini>:
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	bf00      	nop
 8002fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd6:	bc08      	pop	{r3}
 8002fd8:	469e      	mov	lr, r3
 8002fda:	4770      	bx	lr
